{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0","program":"/home/kobruh/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","half","--edition=2021","/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=5e98c082e54737c5","-C","extra-filename=-5e98c082e54737c5","--out-dir","/home/kobruh/Projects/RASCII/target/rls/debug/deps","-L","dependency=/home/kobruh/Projects/RASCII/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/kobruh/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/kobruh/Projects/RASCII/target/rls/debug/deps/libhalf-5e98c082e54737c5.rmeta"},"prelude":{"crate_id":{"name":"half","disambiguator":[15855066790644299756,0]},"crate_root":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src","external_crates":[{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[18009504021925498586,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","num":2,"id":{"name":"core","disambiguator":[4529231008568630066,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6454353934602915994,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4068501274341658802,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6477578750782050620,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8891903781499800355,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5820604803307051361,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8495696488133152618,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[573130743634949162,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[194626158685852222,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[6912020744921273940,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6083063236018227814,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[4457149757231420433,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[17193898272045318619,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[16816495372639671287,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[18018821183479052995,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[8471467948192562461,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[10516304001967857410,0]}},{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[14599081442512269196,0]}}],"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":0,"byte_end":8523,"line_start":1,"line_end":217,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7799,"byte_end":7803,"line_start":185,"line_end":185,"column_start":17,"column_end":21},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":818},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7823,"byte_end":7826,"line_start":186,"line_end":186,"column_start":19,"column_end":22},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8043,"byte_end":8047,"line_start":197,"line_end":197,"column_start":21,"column_end":25},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":818},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8049,"byte_end":8052,"line_start":197,"line_end":197,"column_start":27,"column_end":30},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":663},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8144,"byte_end":8160,"line_start":201,"line_end":201,"column_start":28,"column_end":44},"alias_span":null,"name":"HalfBitsSliceExt","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8162,"byte_end":8179,"line_start":201,"line_end":201,"column_start":46,"column_end":63},"alias_span":null,"name":"HalfFloatSliceExt","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":729},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8313,"byte_end":8327,"line_start":206,"line_end":206,"column_start":26,"column_end":40},"alias_span":null,"name":"HalfBitsVecExt","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":725},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8329,"byte_end":8344,"line_start":206,"line_end":206,"column_start":42,"column_end":57},"alias_span":null,"name":"HalfFloatVecExt","value":"","parent":{"krate":0,"index":765}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":0,"byte_end":8523,"line_start":1,"line_end":217,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":315},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":708},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":787}],"decl_id":null,"docs":" A crate that provides support for half-precision 16-bit floating point types.","sig":null,"attributes":[{"value":"/ A crate that provides support for half-precision 16-bit floating point types.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":82,"byte_end":85,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides the [`f16`] type, which is an implementation of the IEEE 754-2008 standard","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":86,"byte_end":184,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ [`binary16`] a.k.a `half` floating point type. This 16-bit floating point type is intended for","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":185,"byte_end":283,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ efficient storage where the full range and precision of a larger floating point value is not","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":284,"byte_end":380,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ required. This is especially useful for image storage formats.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":381,"byte_end":447,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":448,"byte_end":451,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`bf16`] type, an alternative 16-bit floating point format. The","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":452,"byte_end":546,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ [`bfloat16`] format is a truncated IEEE 754 standard `binary32` float that preserves the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":547,"byte_end":639,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ exponent to allow the same range as [`f32`] but with only 8 bits of precision (instead of 11","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":640,"byte_end":736,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ bits for [`f16`]). See the [`bf16`] type for details.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":737,"byte_end":794,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":795,"byte_end":798,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Because [`f16`] and [`bf16`] are primarily for efficient storage, floating point operations such","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":799,"byte_end":899,"line_start":13,"line_end":13,"column_start":1,"column_end":101}},{"value":"/ as addition, multiplication, etc. are not implemented by hardware. While this crate does provide","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":900,"byte_end":1000,"line_start":14,"line_end":14,"column_start":1,"column_end":101}},{"value":"/ the appropriate trait implementations for basic operations, they each convert the value to","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1001,"byte_end":1095,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/ [`f32`] before performing the operation and then back afterward. When performing complex","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1096,"byte_end":1188,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ arithmetic, manually convert to and from [`f32`] before and after to reduce repeated conversions","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1189,"byte_end":1289,"line_start":17,"line_end":17,"column_start":1,"column_end":101}},{"value":"/ for each operation.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1290,"byte_end":1313,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1314,"byte_end":1317,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`slice`][mod@slice] module for zero-copy in-place conversions of","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1318,"byte_end":1414,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ [`u16`] slices to both [`f16`] and [`bf16`], as well as efficient vectorized conversions of","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1415,"byte_end":1510,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ larger buffers of floating point values to and from these half formats.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1511,"byte_end":1586,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1587,"byte_end":1590,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The crate uses `#[no_std]` by default, so can be used in embedded environments without using the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1591,"byte_end":1691,"line_start":24,"line_end":24,"column_start":1,"column_end":101}},{"value":"/ Rust [`std`] library. A `std` feature to enable support for the standard library is available,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1692,"byte_end":1790,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ see the [Cargo Features](#cargo-features) section below.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1791,"byte_end":1851,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1852,"byte_end":1855,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ A [`prelude`] module is provided for easy importing of available utility traits.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1856,"byte_end":1940,"line_start":28,"line_end":28,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1941,"byte_end":1944,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Cargo Features","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1945,"byte_end":1965,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1966,"byte_end":1969,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This crate supports a number of optional cargo features. None of these features are enabled by","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":1970,"byte_end":2068,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"/ default, even `std`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2069,"byte_end":2093,"line_start":33,"line_end":33,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2094,"byte_end":2097,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - **`use-intrinsics`** -- Use [`core::arch`] hardware intrinsics for `f16` and `bf16` conversions","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2098,"byte_end":2199,"line_start":35,"line_end":35,"column_start":1,"column_end":102}},{"value":"/   if available on the compiler target. This feature currently only works on nightly Rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2200,"byte_end":2292,"line_start":36,"line_end":36,"column_start":1,"column_end":93}},{"value":"/   until the corresponding intrinsics are stabilized.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2293,"byte_end":2349,"line_start":37,"line_end":37,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2350,"byte_end":2353,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/   When this feature is enabled and the hardware supports it, the functions and traits in the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2354,"byte_end":2450,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/   [`slice`][mod@slice] module will use vectorized SIMD intructions for increased efficiency.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2451,"byte_end":2547,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2548,"byte_end":2551,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/   By default, without this feature, conversions are done only in software, which will also be","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2552,"byte_end":2649,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"/   the fallback if the target does not have hardware support. Note that without the `std`","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2650,"byte_end":2742,"line_start":43,"line_end":43,"column_start":1,"column_end":93}},{"value":"/   feature enabled, no runtime CPU feature detection is used, so the hardware support is only","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2743,"byte_end":2839,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/   compiled if the compiler target supports the CPU feature.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2840,"byte_end":2903,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2904,"byte_end":2907,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ - **`alloc`** -- Enable use of the [`alloc`] crate when not using the `std` library.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2908,"byte_end":2996,"line_start":47,"line_end":47,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":2997,"byte_end":3000,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/   Among other functions, this enables the [`vec`] module, which contains zero-copy","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3001,"byte_end":3087,"line_start":49,"line_end":49,"column_start":1,"column_end":87}},{"value":"/   conversions for the [`Vec`] type. This allows fast conversion between raw `Vec<u16>` bits and","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3088,"byte_end":3187,"line_start":50,"line_end":50,"column_start":1,"column_end":100}},{"value":"/   `Vec<f16>` or `Vec<bf16>` arrays, and vice versa.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3188,"byte_end":3243,"line_start":51,"line_end":51,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3244,"byte_end":3247,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - **`std`** -- Enable features that depend on the Rust [`std`] library. This also enables the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3248,"byte_end":3345,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/   `alloc` feature automatically.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3346,"byte_end":3382,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3383,"byte_end":3386,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/   Enabling the `std` feature also enables runtime CPU feature detection when the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3387,"byte_end":3471,"line_start":56,"line_end":56,"column_start":1,"column_end":85}},{"value":"/   `use-intrsincis` feature is also enabled. Without this feature detection, intrinsics are only","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3472,"byte_end":3571,"line_start":57,"line_end":57,"column_start":1,"column_end":100}},{"value":"/   used when compiler target supports the target feature.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3572,"byte_end":3632,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3633,"byte_end":3636,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ - **`serde`** -- Adds support for the [`serde`] crate by implementing [`Serialize`] and","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3637,"byte_end":3728,"line_start":60,"line_end":60,"column_start":1,"column_end":92}},{"value":"/   [`Deserialize`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3729,"byte_end":3788,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3789,"byte_end":3792,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - **`num-traits`** -- Adds support for the [`num-traits`] crate by implementing [`ToPrimitive`],","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3793,"byte_end":3893,"line_start":63,"line_end":63,"column_start":1,"column_end":101}},{"value":"/   [`FromPrimitive`], [`AsPrimitive`], [`Num`], [`Float`], [`FloatCore`], and [`Bounded`] traits","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3894,"byte_end":3993,"line_start":64,"line_end":64,"column_start":1,"column_end":100}},{"value":"/   for both [`f16`] and [`bf16`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":3994,"byte_end":4030,"line_start":65,"line_end":65,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4031,"byte_end":4034,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ - **`bytemuck`** -- Adds support for the [`bytemuck`] crate by implementing [`Zeroable`] and","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4035,"byte_end":4131,"line_start":67,"line_end":67,"column_start":1,"column_end":97}},{"value":"/   [`Pod`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4132,"byte_end":4183,"line_start":68,"line_end":68,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4184,"byte_end":4187,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ - **`zerocopy`** -- Adds support for the [`zerocopy`] crate by implementing [`AsBytes`] and","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4188,"byte_end":4283,"line_start":70,"line_end":70,"column_start":1,"column_end":96}},{"value":"/   [`FromBytes`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4284,"byte_end":4341,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4342,"byte_end":4345,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ [`alloc`]: https://doc.rust-lang.org/alloc/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4346,"byte_end":4393,"line_start":73,"line_end":73,"column_start":1,"column_end":48}},{"value":"/ [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4394,"byte_end":4437,"line_start":74,"line_end":74,"column_start":1,"column_end":44}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4438,"byte_end":4522,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4523,"byte_end":4601,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ [`serde`]: https://crates.io/crates/serde","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4602,"byte_end":4647,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"/ [`bytemuck`]: https://crates.io/crates/bytemuck","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4648,"byte_end":4699,"line_start":78,"line_end":78,"column_start":1,"column_end":52}},{"value":"/ [`num-traits`]: https://crates.io/crates/num-traits","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4700,"byte_end":4755,"line_start":79,"line_end":79,"column_start":1,"column_end":56}},{"value":"/ [`zerocopy`]: https://crates.io/crates/zerocopy","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":4756,"byte_end":4807,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"warn(missing_docs, missing_copy_implementations, trivial_numeric_casts,\nfuture_incompatible)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":6897,"byte_end":7011,"line_start":150,"line_end":155,"column_start":1,"column_end":3}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7052,"byte_end":7087,"line_start":156,"line_end":156,"column_start":41,"column_end":76}},{"value":"allow(clippy :: verbose_bit_mask, clippy :: cast_lossless)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7090,"byte_end":7148,"line_start":157,"line_end":157,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":798},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10174,"byte_end":10178,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"bf16","qualname":"::bfloat::bf16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the [`bfloat16`] format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the [`bfloat16`] format.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9125,"byte_end":9195,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9196,"byte_end":9199,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The [`bfloat16`] floating point format is a truncated 16-bit version of the IEEE 754 standard","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9200,"byte_end":9297,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ `binary32`, a.k.a [`f32`]. [`bf16`] has approximately the same dynamic range as [`f32`] by","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9298,"byte_end":9392,"line_start":27,"line_end":27,"column_start":1,"column_end":95}},{"value":"/ having a lower precision than [`f16`][crate::f16]. While [`f16`][crate::f16] has a precision of","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9393,"byte_end":9492,"line_start":28,"line_end":28,"column_start":1,"column_end":100}},{"value":"/ 11 bits, [`bf16`] has a precision of only 8 bits.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9493,"byte_end":9546,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9547,"byte_end":9550,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Like [`f16`][crate::f16], [`bf16`] does not offer arithmetic operations as it is intended for","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9551,"byte_end":9648,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ compact storage rather than calculations. Operations should be performed with [`f32`] or","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9649,"byte_end":9741,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/ higher-precision types and converted to/from [`bf16`] as necessary.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9742,"byte_end":9813,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9814,"byte_end":9817,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9818,"byte_end":9896,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9897,"byte_end":9927,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":9960,"byte_end":9980,"line_start":38,"line_end":38,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10300,"byte_end":10309,"line_start":48,"line_end":48,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<bf16>::from_bits","value":"const fn from_bits(u16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from the raw bits.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10202,"byte_end":10252,"line_start":45,"line_end":45,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10257,"byte_end":10266,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10271,"byte_end":10282,"line_start":47,"line_end":47,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10740,"byte_end":10748,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<bf16>::from_f32","value":"fn from_f32(f32) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 32-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10361,"byte_end":10428,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10433,"byte_end":10436,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is too large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10441,"byte_end":10530,"line_start":54,"line_end":54,"column_start":5,"column_end":91}},{"value":"/ Subnormal values that are too tiny to be represented will result in ±0. All other values","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10535,"byte_end":10628,"line_start":55,"line_end":55,"column_start":5,"column_end":97}},{"value":"/ are truncated and rounded to the nearest representable value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10633,"byte_end":10698,"line_start":56,"line_end":56,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10703,"byte_end":10712,"line_start":57,"line_end":57,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10717,"byte_end":10728,"line_start":58,"line_end":58,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11444,"byte_end":11458,"line_start":74,"line_end":74,"column_start":18,"column_end":32},"name":"from_f32_const","qualname":"<bf16>::from_f32_const","value":"const fn from_f32_const(f32) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 32-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10818,"byte_end":10885,"line_start":63,"line_end":63,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10890,"byte_end":10893,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f32`][Self::from_f32] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10898,"byte_end":10990,"line_start":65,"line_end":65,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f32`][Self::from_f32] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10995,"byte_end":11090,"line_start":66,"line_end":66,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11095,"byte_end":11126,"line_start":67,"line_end":67,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11131,"byte_end":11134,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is too large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11139,"byte_end":11228,"line_start":69,"line_end":69,"column_start":5,"column_end":91}},{"value":"/ Subnormal values that are too tiny to be represented will result in ±0. All other values","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11233,"byte_end":11326,"line_start":70,"line_end":70,"column_start":5,"column_end":97}},{"value":"/ are truncated and rounded to the nearest representable value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11331,"byte_end":11396,"line_start":71,"line_end":71,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11401,"byte_end":11410,"line_start":72,"line_end":72,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11415,"byte_end":11426,"line_start":73,"line_end":73,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12001,"byte_end":12009,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<bf16>::from_f64","value":"fn from_f64(f64) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 64-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11534,"byte_end":11601,"line_start":78,"line_end":78,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11606,"byte_end":11609,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11614,"byte_end":11702,"line_start":80,"line_end":80,"column_start":5,"column_end":90}},{"value":"/ 64-bit subnormal values are too tiny to be represented and result in ±0. Exponents that","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11707,"byte_end":11799,"line_start":81,"line_end":81,"column_start":5,"column_end":96}},{"value":"/ underflow the minimum exponent will result in subnormals or ±0. All other values are","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11804,"byte_end":11893,"line_start":82,"line_end":82,"column_start":5,"column_end":93}},{"value":"/ truncated and rounded to the nearest representable value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11898,"byte_end":11959,"line_start":83,"line_end":83,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11964,"byte_end":11973,"line_start":84,"line_end":84,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":11978,"byte_end":11989,"line_start":85,"line_end":85,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12793,"byte_end":12807,"line_start":102,"line_end":102,"column_start":18,"column_end":32},"name":"from_f64_const","qualname":"<bf16>::from_f64_const","value":"const fn from_f64_const(f64) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 64-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12079,"byte_end":12146,"line_start":90,"line_end":90,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12151,"byte_end":12154,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f64`][Self::from_f64] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12159,"byte_end":12251,"line_start":92,"line_end":92,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f64`][Self::from_f64] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12256,"byte_end":12351,"line_start":93,"line_end":93,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12356,"byte_end":12387,"line_start":94,"line_end":94,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12392,"byte_end":12395,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12400,"byte_end":12488,"line_start":96,"line_end":96,"column_start":5,"column_end":90}},{"value":"/ 64-bit subnormal values are too tiny to be represented and result in ±0. Exponents that","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12493,"byte_end":12585,"line_start":97,"line_end":97,"column_start":5,"column_end":96}},{"value":"/ underflow the minimum exponent will result in subnormals or ±0. All other values are","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12590,"byte_end":12679,"line_start":98,"line_end":98,"column_start":5,"column_end":93}},{"value":"/ truncated and rounded to the nearest representable value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12684,"byte_end":12745,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12750,"byte_end":12759,"line_start":100,"line_end":100,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12764,"byte_end":12775,"line_start":101,"line_end":101,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12994,"byte_end":13001,"line_start":109,"line_end":109,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<bf16>::to_bits","value":"const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] into the underlying bit representation.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12883,"byte_end":12946,"line_start":106,"line_end":106,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12951,"byte_end":12960,"line_start":107,"line_end":107,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":12965,"byte_end":12976,"line_start":108,"line_end":108,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13410,"byte_end":13421,"line_start":125,"line_end":125,"column_start":18,"column_end":29},"name":"to_le_bytes","qualname":"<bf16>::to_le_bytes","value":"const fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13043,"byte_end":13136,"line_start":113,"line_end":113,"column_start":5,"column_end":98}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13141,"byte_end":13170,"line_start":114,"line_end":114,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13175,"byte_end":13178,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13183,"byte_end":13197,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13202,"byte_end":13205,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13210,"byte_end":13221,"line_start":118,"line_end":118,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13226,"byte_end":13253,"line_start":119,"line_end":119,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13258,"byte_end":13309,"line_start":120,"line_end":120,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x48, 0x41]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13314,"byte_end":13350,"line_start":121,"line_end":121,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13355,"byte_end":13362,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13367,"byte_end":13376,"line_start":123,"line_end":123,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13381,"byte_end":13392,"line_start":124,"line_end":124,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13855,"byte_end":13866,"line_start":141,"line_end":141,"column_start":18,"column_end":29},"name":"to_be_bytes","qualname":"<bf16>::to_be_bytes","value":"const fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13481,"byte_end":13574,"line_start":129,"line_end":129,"column_start":5,"column_end":98}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13579,"byte_end":13615,"line_start":130,"line_end":130,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13620,"byte_end":13623,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13628,"byte_end":13642,"line_start":132,"line_end":132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13647,"byte_end":13650,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13655,"byte_end":13666,"line_start":134,"line_end":134,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13671,"byte_end":13698,"line_start":135,"line_end":135,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13703,"byte_end":13754,"line_start":136,"line_end":136,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x41, 0x48]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13759,"byte_end":13795,"line_start":137,"line_end":137,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13800,"byte_end":13807,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13812,"byte_end":13821,"line_start":139,"line_end":139,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13826,"byte_end":13837,"line_start":140,"line_end":140,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14591,"byte_end":14602,"line_start":165,"line_end":165,"column_start":18,"column_end":29},"name":"to_ne_bytes","qualname":"<bf16>::to_ne_bytes","value":"const fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":13926,"byte_end":14019,"line_start":145,"line_end":145,"column_start":5,"column_end":98}},{"value":"/ native byte order.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14024,"byte_end":14046,"line_start":146,"line_end":146,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14051,"byte_end":14054,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14059,"byte_end":14139,"line_start":148,"line_end":148,"column_start":5,"column_end":85}},{"value":"/ [`to_be_bytes`][bf16::to_be_bytes] or [`to_le_bytes`][bf16::to_le_bytes], as appropriate,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14144,"byte_end":14237,"line_start":149,"line_end":149,"column_start":5,"column_end":98}},{"value":"/ instead.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14242,"byte_end":14254,"line_start":150,"line_end":150,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14259,"byte_end":14262,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14267,"byte_end":14281,"line_start":152,"line_end":152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14286,"byte_end":14289,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14294,"byte_end":14305,"line_start":154,"line_end":154,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14310,"byte_end":14337,"line_start":155,"line_end":155,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14342,"byte_end":14393,"line_start":156,"line_end":156,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14398,"byte_end":14452,"line_start":157,"line_end":157,"column_start":5,"column_end":59}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14457,"byte_end":14477,"line_start":158,"line_end":158,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14482,"byte_end":14494,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14499,"byte_end":14519,"line_start":160,"line_end":160,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14524,"byte_end":14531,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14536,"byte_end":14543,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14548,"byte_end":14557,"line_start":163,"line_end":163,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14562,"byte_end":14573,"line_start":164,"line_end":164,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15001,"byte_end":15014,"line_start":180,"line_end":180,"column_start":18,"column_end":31},"name":"from_le_bytes","qualname":"<bf16>::from_le_bytes","value":"const fn from_le_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14662,"byte_end":14754,"line_start":169,"line_end":169,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14759,"byte_end":14762,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14767,"byte_end":14781,"line_start":171,"line_end":171,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14786,"byte_end":14789,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14794,"byte_end":14805,"line_start":173,"line_end":173,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14810,"byte_end":14837,"line_start":174,"line_end":174,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_le_bytes([0x48, 0x41]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14842,"byte_end":14892,"line_start":175,"line_end":175,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14897,"byte_end":14941,"line_start":176,"line_end":176,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14946,"byte_end":14953,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14958,"byte_end":14967,"line_start":178,"line_end":178,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":14972,"byte_end":14983,"line_start":179,"line_end":179,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15439,"byte_end":15452,"line_start":195,"line_end":195,"column_start":18,"column_end":31},"name":"from_be_bytes","qualname":"<bf16>::from_be_bytes","value":"const fn from_be_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15103,"byte_end":15192,"line_start":184,"line_end":184,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15197,"byte_end":15200,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15205,"byte_end":15219,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15224,"byte_end":15227,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15232,"byte_end":15243,"line_start":188,"line_end":188,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15248,"byte_end":15275,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_be_bytes([0x41, 0x48]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15280,"byte_end":15330,"line_start":190,"line_end":190,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15335,"byte_end":15379,"line_start":191,"line_end":191,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15384,"byte_end":15391,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15396,"byte_end":15405,"line_start":193,"line_end":193,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15410,"byte_end":15421,"line_start":194,"line_end":194,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16201,"byte_end":16214,"line_start":218,"line_end":218,"column_start":18,"column_end":31},"name":"from_ne_bytes","qualname":"<bf16>::from_ne_bytes","value":"const fn from_ne_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15541,"byte_end":15633,"line_start":199,"line_end":199,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15638,"byte_end":15641,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15646,"byte_end":15735,"line_start":201,"line_end":201,"column_start":5,"column_end":94}},{"value":"/ [`from_be_bytes`][bf16::from_be_bytes] or [`from_le_bytes`][bf16::from_le_bytes], as","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15740,"byte_end":15828,"line_start":202,"line_end":202,"column_start":5,"column_end":93}},{"value":"/ appropriate instead.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15833,"byte_end":15857,"line_start":203,"line_end":203,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15862,"byte_end":15865,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15870,"byte_end":15884,"line_start":205,"line_end":205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15889,"byte_end":15892,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15897,"byte_end":15908,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15913,"byte_end":15940,"line_start":208,"line_end":208,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":15945,"byte_end":16013,"line_start":209,"line_end":209,"column_start":5,"column_end":73}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16018,"byte_end":16038,"line_start":210,"line_end":210,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16043,"byte_end":16055,"line_start":211,"line_end":211,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16060,"byte_end":16080,"line_start":212,"line_end":212,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16085,"byte_end":16092,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16097,"byte_end":16141,"line_start":214,"line_end":214,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16146,"byte_end":16153,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16158,"byte_end":16167,"line_start":216,"line_end":216,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16172,"byte_end":16183,"line_start":217,"line_end":217,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16494,"byte_end":16500,"line_start":227,"line_end":227,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<bf16>::to_f32","value":"fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f32`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f32`] value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16303,"byte_end":16355,"line_start":222,"line_end":222,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16360,"byte_end":16363,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f32`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16368,"byte_end":16452,"line_start":224,"line_end":224,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16457,"byte_end":16466,"line_start":225,"line_end":225,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16471,"byte_end":16482,"line_start":226,"line_end":226,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16985,"byte_end":16997,"line_start":240,"line_end":240,"column_start":18,"column_end":30},"name":"to_f32_const","qualname":"<bf16>::to_f32_const","value":"const fn to_f32_const(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f32`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f32`] value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16555,"byte_end":16607,"line_start":231,"line_end":231,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16612,"byte_end":16615,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f32`][Self::to_f32] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16620,"byte_end":16708,"line_start":233,"line_end":233,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f32`][Self::to_f32] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16713,"byte_end":16804,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16809,"byte_end":16840,"line_start":235,"line_end":235,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16845,"byte_end":16848,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f32`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16853,"byte_end":16937,"line_start":237,"line_end":237,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16942,"byte_end":16951,"line_start":238,"line_end":238,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":16956,"byte_end":16967,"line_start":239,"line_end":239,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17252,"byte_end":17258,"line_start":249,"line_end":249,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<bf16>::to_f64","value":"fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f64`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f64`] value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17061,"byte_end":17113,"line_start":244,"line_end":244,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17118,"byte_end":17121,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f64`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17126,"byte_end":17210,"line_start":246,"line_end":246,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17215,"byte_end":17224,"line_start":247,"line_end":247,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17229,"byte_end":17240,"line_start":248,"line_end":248,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17743,"byte_end":17755,"line_start":262,"line_end":262,"column_start":18,"column_end":30},"name":"to_f64_const","qualname":"<bf16>::to_f64_const","value":"const fn to_f64_const(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f64`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f64`] value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17313,"byte_end":17365,"line_start":253,"line_end":253,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17370,"byte_end":17373,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f64`][Self::to_f64] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17378,"byte_end":17466,"line_start":255,"line_end":255,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f64`][Self::to_f64] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17471,"byte_end":17562,"line_start":256,"line_end":256,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17567,"byte_end":17598,"line_start":257,"line_end":257,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17603,"byte_end":17606,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f64`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17611,"byte_end":17695,"line_start":259,"line_end":259,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17700,"byte_end":17709,"line_start":260,"line_end":260,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17714,"byte_end":17725,"line_start":261,"line_end":261,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18171,"byte_end":18177,"line_start":281,"line_end":281,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<bf16>::is_nan","value":"const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is NaN and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is NaN and `false` otherwise.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17819,"byte_end":17881,"line_start":266,"line_end":266,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17886,"byte_end":17889,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17894,"byte_end":17908,"line_start":268,"line_end":268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17913,"byte_end":17916,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17921,"byte_end":17932,"line_start":270,"line_end":270,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17937,"byte_end":17964,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17969,"byte_end":17972,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":17977,"byte_end":18001,"line_start":273,"line_end":273,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18006,"byte_end":18042,"line_start":274,"line_end":274,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18047,"byte_end":18050,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18055,"byte_end":18081,"line_start":276,"line_end":276,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18086,"byte_end":18111,"line_start":277,"line_end":277,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18116,"byte_end":18123,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18128,"byte_end":18137,"line_start":279,"line_end":279,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18142,"byte_end":18153,"line_start":280,"line_end":280,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18768,"byte_end":18779,"line_start":305,"line_end":305,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<bf16>::is_infinite","value":"const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false` otherwise.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18244,"byte_end":18308,"line_start":285,"line_end":285,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18313,"byte_end":18316,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18321,"byte_end":18335,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18340,"byte_end":18343,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18348,"byte_end":18359,"line_start":289,"line_end":289,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18364,"byte_end":18391,"line_start":290,"line_end":290,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18396,"byte_end":18399,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18404,"byte_end":18439,"line_start":292,"line_end":292,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18444,"byte_end":18473,"line_start":293,"line_end":293,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18478,"byte_end":18515,"line_start":294,"line_end":294,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18520,"byte_end":18544,"line_start":295,"line_end":295,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18549,"byte_end":18552,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18557,"byte_end":18587,"line_start":297,"line_end":297,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18592,"byte_end":18624,"line_start":298,"line_end":298,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18629,"byte_end":18632,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18637,"byte_end":18668,"line_start":300,"line_end":300,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18673,"byte_end":18708,"line_start":301,"line_end":301,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18713,"byte_end":18720,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18725,"byte_end":18734,"line_start":303,"line_end":303,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18739,"byte_end":18750,"line_start":304,"line_end":304,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19362,"byte_end":19371,"line_start":329,"line_end":329,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<bf16>::is_finite","value":"const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18847,"byte_end":18909,"line_start":309,"line_end":309,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18914,"byte_end":18917,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18922,"byte_end":18936,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18941,"byte_end":18944,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18949,"byte_end":18960,"line_start":313,"line_end":313,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18965,"byte_end":18992,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":18997,"byte_end":19000,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19005,"byte_end":19040,"line_start":316,"line_end":316,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19045,"byte_end":19074,"line_start":317,"line_end":317,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19079,"byte_end":19116,"line_start":318,"line_end":318,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19121,"byte_end":19145,"line_start":319,"line_end":319,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19150,"byte_end":19153,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19158,"byte_end":19185,"line_start":321,"line_end":321,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19190,"byte_end":19193,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19198,"byte_end":19228,"line_start":323,"line_end":323,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19233,"byte_end":19263,"line_start":324,"line_end":324,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19268,"byte_end":19302,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19307,"byte_end":19314,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19319,"byte_end":19328,"line_start":327,"line_end":327,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19333,"byte_end":19344,"line_start":328,"line_end":328,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20143,"byte_end":20152,"line_start":356,"line_end":356,"column_start":18,"column_end":27},"name":"is_normal","qualname":"<bf16>::is_normal","value":"const fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19439,"byte_end":19517,"line_start":333,"line_end":333,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19522,"byte_end":19525,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19530,"byte_end":19544,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19549,"byte_end":19552,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19557,"byte_end":19568,"line_start":337,"line_end":337,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19573,"byte_end":19600,"line_start":338,"line_end":338,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19605,"byte_end":19608,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let min = bf16::MIN_POSITIVE;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19613,"byte_end":19646,"line_start":340,"line_end":340,"column_start":5,"column_end":38}},{"value":"/ let max = bf16::MAX;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19651,"byte_end":19675,"line_start":341,"line_end":341,"column_start":5,"column_end":29}},{"value":"/ let lower_than_min = bf16::from_f32(1.0e-39_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19680,"byte_end":19733,"line_start":342,"line_end":342,"column_start":5,"column_end":58}},{"value":"/ let zero = bf16::from_f32(0.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19738,"byte_end":19777,"line_start":343,"line_end":343,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19782,"byte_end":19785,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19790,"byte_end":19819,"line_start":345,"line_end":345,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19824,"byte_end":19853,"line_start":346,"line_end":346,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19858,"byte_end":19861,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19866,"byte_end":19897,"line_start":348,"line_end":348,"column_start":5,"column_end":36}},{"value":"/ assert!(!bf16::NAN.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19902,"byte_end":19938,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/ assert!(!bf16::INFINITY.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19943,"byte_end":19984,"line_start":350,"line_end":350,"column_start":5,"column_end":46}},{"value":"/ // Values between 0 and `min` are subnormal.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":19989,"byte_end":20037,"line_start":351,"line_end":351,"column_start":5,"column_end":53}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20042,"byte_end":20083,"line_start":352,"line_end":352,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20088,"byte_end":20095,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20100,"byte_end":20109,"line_start":354,"line_end":354,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20114,"byte_end":20125,"line_start":355,"line_end":355,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20810,"byte_end":20818,"line_start":379,"line_end":379,"column_start":18,"column_end":26},"name":"classify","qualname":"<bf16>::classify","value":"const fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20255,"byte_end":20309,"line_start":361,"line_end":361,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20314,"byte_end":20317,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20322,"byte_end":20412,"line_start":363,"line_end":363,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20417,"byte_end":20439,"line_start":364,"line_end":364,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20444,"byte_end":20447,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20452,"byte_end":20466,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20471,"byte_end":20474,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20479,"byte_end":20490,"line_start":368,"line_end":368,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20495,"byte_end":20524,"line_start":369,"line_end":369,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20529,"byte_end":20556,"line_start":370,"line_end":370,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20561,"byte_end":20564,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ let num = bf16::from_f32(12.4_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20569,"byte_end":20608,"line_start":372,"line_end":372,"column_start":5,"column_end":44}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20613,"byte_end":20642,"line_start":373,"line_end":373,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20647,"byte_end":20650,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20655,"byte_end":20706,"line_start":375,"line_end":375,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20711,"byte_end":20764,"line_start":376,"line_end":376,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20769,"byte_end":20776,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":20781,"byte_end":20792,"line_start":378,"line_end":378,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21834,"byte_end":21840,"line_start":410,"line_end":410,"column_start":18,"column_end":24},"name":"signum","qualname":"<bf16>::signum","value":"const fn signum(Self) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21186,"byte_end":21242,"line_start":391,"line_end":391,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21247,"byte_end":21250,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ * 1.0 if the number is positive, +0.0 or [`INFINITY`][bf16::INFINITY]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21255,"byte_end":21328,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/ * −1.0 if the number is negative, −0.0` or [`NEG_INFINITY`][bf16::NEG_INFINITY]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21333,"byte_end":21420,"line_start":394,"line_end":394,"column_start":5,"column_end":88}},{"value":"/ * [`NAN`][bf16::NAN] if the number is NaN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21425,"byte_end":21470,"line_start":395,"line_end":395,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21475,"byte_end":21478,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21483,"byte_end":21497,"line_start":397,"line_end":397,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21502,"byte_end":21505,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21510,"byte_end":21521,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21526,"byte_end":21553,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21558,"byte_end":21561,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(3.5_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21566,"byte_end":21602,"line_start":402,"line_end":402,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21607,"byte_end":21610,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), bf16::from_f32(1.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21615,"byte_end":21663,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(bf16::NEG_INFINITY.signum(), bf16::from_f32(-1.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21668,"byte_end":21734,"line_start":405,"line_end":405,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21739,"byte_end":21742,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.signum().is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21747,"byte_end":21788,"line_start":407,"line_end":407,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21793,"byte_end":21800,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":21805,"byte_end":21816,"line_start":409,"line_end":409,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22623,"byte_end":22639,"line_start":439,"line_end":439,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<bf16>::is_sign_positive","value":"const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22031,"byte_end":22120,"line_start":420,"line_end":420,"column_start":5,"column_end":94}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22125,"byte_end":22156,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22161,"byte_end":22164,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22169,"byte_end":22183,"line_start":423,"line_end":423,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22188,"byte_end":22191,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22196,"byte_end":22207,"line_start":425,"line_end":425,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22212,"byte_end":22239,"line_start":426,"line_end":426,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22244,"byte_end":22247,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22252,"byte_end":22276,"line_start":428,"line_end":428,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22281,"byte_end":22317,"line_start":429,"line_end":429,"column_start":5,"column_end":41}},{"value":"/ let g = bf16::from_f32(-7.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22322,"byte_end":22359,"line_start":430,"line_end":430,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22364,"byte_end":22367,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22372,"byte_end":22406,"line_start":432,"line_end":432,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22411,"byte_end":22446,"line_start":433,"line_end":433,"column_start":5,"column_end":40}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22451,"byte_end":22496,"line_start":434,"line_end":434,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22501,"byte_end":22563,"line_start":435,"line_end":435,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22568,"byte_end":22575,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22580,"byte_end":22589,"line_start":437,"line_end":437,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22594,"byte_end":22605,"line_start":438,"line_end":438,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23293,"byte_end":23309,"line_start":462,"line_end":462,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<bf16>::is_sign_negative","value":"const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22699,"byte_end":22790,"line_start":443,"line_end":443,"column_start":5,"column_end":94}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22795,"byte_end":22828,"line_start":444,"line_end":444,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22833,"byte_end":22836,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22841,"byte_end":22855,"line_start":446,"line_end":446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22860,"byte_end":22863,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22868,"byte_end":22879,"line_start":448,"line_end":448,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22884,"byte_end":22911,"line_start":449,"line_end":449,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22916,"byte_end":22919,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22924,"byte_end":22948,"line_start":451,"line_end":451,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22953,"byte_end":22988,"line_start":452,"line_end":452,"column_start":5,"column_end":40}},{"value":"/ let g = bf16::from_f32(-7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":22993,"byte_end":23029,"line_start":453,"line_end":453,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23034,"byte_end":23037,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23042,"byte_end":23077,"line_start":455,"line_end":455,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23082,"byte_end":23116,"line_start":456,"line_end":456,"column_start":5,"column_end":39}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23121,"byte_end":23166,"line_start":457,"line_end":457,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23171,"byte_end":23233,"line_start":458,"line_end":458,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23238,"byte_end":23245,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23250,"byte_end":23259,"line_start":460,"line_end":460,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23264,"byte_end":23275,"line_start":461,"line_end":461,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24197,"byte_end":24205,"line_start":486,"line_end":486,"column_start":18,"column_end":26},"name":"copysign","qualname":"<bf16>::copysign","value":"const fn copysign(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number composed of the magnitude of `self` and the sign of `sign`.","sig":null,"attributes":[{"value":"/ Returns a number composed of the magnitude of `self` and the sign of `sign`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23369,"byte_end":23449,"line_start":466,"line_end":466,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23454,"byte_end":23457,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Equal to `self` if the sign of `self` and `sign` are the same, otherwise equal to `-self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23462,"byte_end":23556,"line_start":468,"line_end":468,"column_start":5,"column_end":99}},{"value":"/ If `self` is NaN, then NaN with the sign of `sign` is returned.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23561,"byte_end":23628,"line_start":469,"line_end":469,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23633,"byte_end":23636,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23641,"byte_end":23655,"line_start":471,"line_end":471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23660,"byte_end":23663,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23668,"byte_end":23675,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23680,"byte_end":23707,"line_start":474,"line_end":474,"column_start":5,"column_end":32}},{"value":"/ let f = bf16::from_f32(3.5);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23712,"byte_end":23744,"line_start":475,"line_end":475,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23749,"byte_end":23752,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.copysign(bf16::from_f32(0.42)), bf16::from_f32(3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23757,"byte_end":23827,"line_start":477,"line_end":477,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(f.copysign(bf16::from_f32(-0.42)), bf16::from_f32(-3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23832,"byte_end":23904,"line_start":478,"line_end":478,"column_start":5,"column_end":77}},{"value":"/ assert_eq!((-f).copysign(bf16::from_f32(0.42)), bf16::from_f32(3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23909,"byte_end":23982,"line_start":479,"line_end":479,"column_start":5,"column_end":78}},{"value":"/ assert_eq!((-f).copysign(bf16::from_f32(-0.42)), bf16::from_f32(-3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":23987,"byte_end":24062,"line_start":480,"line_end":480,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24067,"byte_end":24070,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.copysign(bf16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24075,"byte_end":24137,"line_start":482,"line_end":482,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24142,"byte_end":24149,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24154,"byte_end":24163,"line_start":484,"line_end":484,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24168,"byte_end":24179,"line_start":485,"line_end":485,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24679,"byte_end":24682,"line_start":505,"line_end":505,"column_start":12,"column_end":15},"name":"max","qualname":"<bf16>::max","value":"fn max(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24303,"byte_end":24346,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24351,"byte_end":24354,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24359,"byte_end":24431,"line_start":492,"line_end":492,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24436,"byte_end":24439,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24444,"byte_end":24458,"line_start":494,"line_end":494,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24463,"byte_end":24466,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24471,"byte_end":24478,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24483,"byte_end":24510,"line_start":497,"line_end":497,"column_start":5,"column_end":32}},{"value":"/ let x = bf16::from_f32(1.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24515,"byte_end":24547,"line_start":498,"line_end":498,"column_start":5,"column_end":37}},{"value":"/ let y = bf16::from_f32(2.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24552,"byte_end":24584,"line_start":499,"line_end":499,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24589,"byte_end":24592,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.max(y), y);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24597,"byte_end":24625,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24630,"byte_end":24637,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24642,"byte_end":24651,"line_start":503,"line_end":503,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24656,"byte_end":24667,"line_start":504,"line_end":504,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25206,"byte_end":25209,"line_start":528,"line_end":528,"column_start":12,"column_end":15},"name":"min","qualname":"<bf16>::min","value":"fn min(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24830,"byte_end":24873,"line_start":513,"line_end":513,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24878,"byte_end":24881,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24886,"byte_end":24958,"line_start":515,"line_end":515,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24963,"byte_end":24966,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24971,"byte_end":24985,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24990,"byte_end":24993,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":24998,"byte_end":25005,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25010,"byte_end":25037,"line_start":520,"line_end":520,"column_start":5,"column_end":32}},{"value":"/ let x = bf16::from_f32(1.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25042,"byte_end":25074,"line_start":521,"line_end":521,"column_start":5,"column_end":37}},{"value":"/ let y = bf16::from_f32(2.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25079,"byte_end":25111,"line_start":522,"line_end":522,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25116,"byte_end":25119,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.min(y), x);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25124,"byte_end":25152,"line_start":524,"line_end":524,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25157,"byte_end":25164,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25169,"byte_end":25178,"line_start":526,"line_end":526,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25183,"byte_end":25194,"line_start":527,"line_end":527,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26287,"byte_end":26292,"line_start":557,"line_end":557,"column_start":12,"column_end":17},"name":"clamp","qualname":"<bf16>::clamp","value":"fn clamp(Self, bf16, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Restrict a value to a certain interval unless it is NaN.","sig":null,"attributes":[{"value":"/ Restrict a value to a certain interval unless it is NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25357,"byte_end":25417,"line_start":536,"line_end":536,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25422,"byte_end":25425,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25430,"byte_end":25520,"line_start":538,"line_end":538,"column_start":5,"column_end":95}},{"value":"/ Otherwise this returns `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25525,"byte_end":25559,"line_start":539,"line_end":539,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25564,"byte_end":25567,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ Note that this function returns NaN if the initial value was NaN as well.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25572,"byte_end":25649,"line_start":541,"line_end":541,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25654,"byte_end":25657,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25662,"byte_end":25674,"line_start":543,"line_end":543,"column_start":5,"column_end":17}},{"value":"/ Panics if `min > max`, `min` is NaN, or `max` is NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25679,"byte_end":25736,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25741,"byte_end":25744,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25749,"byte_end":25763,"line_start":546,"line_end":546,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25768,"byte_end":25771,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25776,"byte_end":25783,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25788,"byte_end":25815,"line_start":549,"line_end":549,"column_start":5,"column_end":32}},{"value":"/ assert!(bf16::from_f32(-3.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(-2.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25820,"byte_end":25927,"line_start":550,"line_end":550,"column_start":5,"column_end":112}},{"value":"/ assert!(bf16::from_f32(0.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(0.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":25932,"byte_end":26037,"line_start":551,"line_end":551,"column_start":5,"column_end":110}},{"value":"/ assert!(bf16::from_f32(2.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(1.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26042,"byte_end":26147,"line_start":552,"line_end":552,"column_start":5,"column_end":110}},{"value":"/ assert!(bf16::NAN.clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26152,"byte_end":26233,"line_start":553,"line_end":553,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26238,"byte_end":26245,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26250,"byte_end":26259,"line_start":555,"line_end":555,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26264,"byte_end":26275,"line_start":556,"line_end":556,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28938,"byte_end":28947,"line_start":637,"line_end":637,"column_start":12,"column_end":21},"name":"total_cmp","qualname":"<bf16>::total_cmp","value":"fn total_cmp(&Self, &Self) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Returns the ordering between `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the ordering between `self` and `other`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26511,"byte_end":26563,"line_start":569,"line_end":569,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26568,"byte_end":26571,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Unlike the standard partial comparison between floating point numbers,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26576,"byte_end":26650,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ this comparison always produces an ordering in accordance to","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26655,"byte_end":26719,"line_start":572,"line_end":572,"column_start":5,"column_end":69}},{"value":"/ the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26724,"byte_end":26797,"line_start":573,"line_end":573,"column_start":5,"column_end":78}},{"value":"/ floating point standard. The values are ordered in the following sequence:","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26802,"byte_end":26880,"line_start":574,"line_end":574,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26885,"byte_end":26888,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ - negative quiet NaN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26893,"byte_end":26917,"line_start":576,"line_end":576,"column_start":5,"column_end":29}},{"value":"/ - negative signaling NaN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26922,"byte_end":26950,"line_start":577,"line_end":577,"column_start":5,"column_end":33}},{"value":"/ - negative infinity","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26955,"byte_end":26978,"line_start":578,"line_end":578,"column_start":5,"column_end":28}},{"value":"/ - negative numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":26983,"byte_end":27005,"line_start":579,"line_end":579,"column_start":5,"column_end":27}},{"value":"/ - negative subnormal numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27010,"byte_end":27042,"line_start":580,"line_end":580,"column_start":5,"column_end":37}},{"value":"/ - negative zero","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27047,"byte_end":27066,"line_start":581,"line_end":581,"column_start":5,"column_end":24}},{"value":"/ - positive zero","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27071,"byte_end":27090,"line_start":582,"line_end":582,"column_start":5,"column_end":24}},{"value":"/ - positive subnormal numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27095,"byte_end":27127,"line_start":583,"line_end":583,"column_start":5,"column_end":37}},{"value":"/ - positive numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27132,"byte_end":27154,"line_start":584,"line_end":584,"column_start":5,"column_end":27}},{"value":"/ - positive infinity","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27159,"byte_end":27182,"line_start":585,"line_end":585,"column_start":5,"column_end":28}},{"value":"/ - positive signaling NaN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27187,"byte_end":27215,"line_start":586,"line_end":586,"column_start":5,"column_end":33}},{"value":"/ - positive quiet NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27220,"byte_end":27245,"line_start":587,"line_end":587,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27250,"byte_end":27253,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ The ordering established by this function does not always agree with the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27258,"byte_end":27334,"line_start":589,"line_end":589,"column_start":5,"column_end":81}},{"value":"/ [`PartialOrd`] and [`PartialEq`] implementations of `bf16`. For example,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27339,"byte_end":27415,"line_start":590,"line_end":590,"column_start":5,"column_end":81}},{"value":"/ they consider negative and positive zero equal, while `total_cmp`","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27420,"byte_end":27489,"line_start":591,"line_end":591,"column_start":5,"column_end":74}},{"value":"/ doesn't.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27494,"byte_end":27506,"line_start":592,"line_end":592,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27511,"byte_end":27514,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ The interpretation of the signaling NaN bit follows the definition in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27519,"byte_end":27592,"line_start":594,"line_end":594,"column_start":5,"column_end":78}},{"value":"/ the IEEE 754 standard, which may not match the interpretation by some of","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27597,"byte_end":27673,"line_start":595,"line_end":595,"column_start":5,"column_end":81}},{"value":"/ the older, non-conformant (e.g. MIPS) hardware implementations.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27678,"byte_end":27745,"line_start":596,"line_end":596,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27750,"byte_end":27753,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27758,"byte_end":27772,"line_start":598,"line_end":598,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27777,"byte_end":27784,"line_start":599,"line_end":599,"column_start":5,"column_end":12}},{"value":"/ # use half::bf16;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27789,"byte_end":27810,"line_start":600,"line_end":600,"column_start":5,"column_end":26}},{"value":"/ let mut v: Vec<bf16> = vec![];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27815,"byte_end":27849,"line_start":601,"line_end":601,"column_start":5,"column_end":39}},{"value":"/ v.push(bf16::ONE);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27854,"byte_end":27876,"line_start":602,"line_end":602,"column_start":5,"column_end":27}},{"value":"/ v.push(bf16::INFINITY);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27881,"byte_end":27908,"line_start":603,"line_end":603,"column_start":5,"column_end":32}},{"value":"/ v.push(bf16::NEG_INFINITY);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27913,"byte_end":27944,"line_start":604,"line_end":604,"column_start":5,"column_end":36}},{"value":"/ v.push(bf16::NAN);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27949,"byte_end":27971,"line_start":605,"line_end":605,"column_start":5,"column_end":27}},{"value":"/ v.push(bf16::MAX_SUBNORMAL);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":27976,"byte_end":28008,"line_start":606,"line_end":606,"column_start":5,"column_end":37}},{"value":"/ v.push(-bf16::MAX_SUBNORMAL);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28013,"byte_end":28046,"line_start":607,"line_end":607,"column_start":5,"column_end":38}},{"value":"/ v.push(bf16::ZERO);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28051,"byte_end":28074,"line_start":608,"line_end":608,"column_start":5,"column_end":28}},{"value":"/ v.push(bf16::NEG_ZERO);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28079,"byte_end":28106,"line_start":609,"line_end":609,"column_start":5,"column_end":32}},{"value":"/ v.push(bf16::NEG_ONE);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28111,"byte_end":28137,"line_start":610,"line_end":610,"column_start":5,"column_end":31}},{"value":"/ v.push(bf16::MIN_POSITIVE);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28142,"byte_end":28173,"line_start":611,"line_end":611,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28178,"byte_end":28181,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ v.sort_by(|a, b| a.total_cmp(&b));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28186,"byte_end":28224,"line_start":613,"line_end":613,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28229,"byte_end":28232,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ assert!(v","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28237,"byte_end":28250,"line_start":615,"line_end":615,"column_start":5,"column_end":18}},{"value":"/     .into_iter()","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28255,"byte_end":28275,"line_start":616,"line_end":616,"column_start":5,"column_end":25}},{"value":"/     .zip(","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28280,"byte_end":28293,"line_start":617,"line_end":617,"column_start":5,"column_end":18}},{"value":"/         [","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28298,"byte_end":28311,"line_start":618,"line_end":618,"column_start":5,"column_end":18}},{"value":"/             bf16::NEG_INFINITY,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28316,"byte_end":28351,"line_start":619,"line_end":619,"column_start":5,"column_end":40}},{"value":"/             bf16::NEG_ONE,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28356,"byte_end":28386,"line_start":620,"line_end":620,"column_start":5,"column_end":35}},{"value":"/             -bf16::MAX_SUBNORMAL,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28391,"byte_end":28428,"line_start":621,"line_end":621,"column_start":5,"column_end":42}},{"value":"/             bf16::NEG_ZERO,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28433,"byte_end":28464,"line_start":622,"line_end":622,"column_start":5,"column_end":36}},{"value":"/             bf16::ZERO,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28469,"byte_end":28496,"line_start":623,"line_end":623,"column_start":5,"column_end":32}},{"value":"/             bf16::MAX_SUBNORMAL,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28501,"byte_end":28537,"line_start":624,"line_end":624,"column_start":5,"column_end":41}},{"value":"/             bf16::MIN_POSITIVE,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28542,"byte_end":28577,"line_start":625,"line_end":625,"column_start":5,"column_end":40}},{"value":"/             bf16::ONE,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28582,"byte_end":28608,"line_start":626,"line_end":626,"column_start":5,"column_end":31}},{"value":"/             bf16::INFINITY,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28613,"byte_end":28644,"line_start":627,"line_end":627,"column_start":5,"column_end":36}},{"value":"/             bf16::NAN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28649,"byte_end":28674,"line_start":628,"line_end":628,"column_start":5,"column_end":30}},{"value":"/         ]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28679,"byte_end":28692,"line_start":629,"line_end":629,"column_start":5,"column_end":18}},{"value":"/         .iter()","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28697,"byte_end":28716,"line_start":630,"line_end":630,"column_start":5,"column_end":24}},{"value":"/     )","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28721,"byte_end":28730,"line_start":631,"line_end":631,"column_start":5,"column_end":14}},{"value":"/     .all(|(a, b)| a.to_bits() == b.to_bits()));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28735,"byte_end":28786,"line_start":632,"line_end":632,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28791,"byte_end":28798,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28901,"byte_end":28910,"line_start":635,"line_end":635,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":28915,"byte_end":28926,"line_start":636,"line_end":636,"column_start":5,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29300,"byte_end":29306,"line_start":646,"line_end":646,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::bfloat::bf16::DIGITS","value":"u32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Approximate number of [`bf16`] significant digits in base 10\n","sig":null,"attributes":[{"value":"/ Approximate number of [`bf16`] significant digits in base 10","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29221,"byte_end":29285,"line_start":645,"line_end":645,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":139},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29521,"byte_end":29528,"line_start":651,"line_end":651,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::bfloat::bf16::EPSILON","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`]\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","sig":null,"attributes":[{"value":"/ [`bf16`]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29321,"byte_end":29333,"line_start":647,"line_end":647,"column_start":5,"column_end":17}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29338,"byte_end":29412,"line_start":648,"line_end":648,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29417,"byte_end":29420,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29425,"byte_end":29506,"line_start":650,"line_end":650,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":140},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29610,"byte_end":29618,"line_start":653,"line_end":653,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::bfloat::bf16::INFINITY","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] positive Infinity (+∞)\n","sig":null,"attributes":[{"value":"/ [`bf16`] positive Infinity (+∞)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29558,"byte_end":29595,"line_start":652,"line_end":652,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":141},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29714,"byte_end":29729,"line_start":655,"line_end":655,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::bfloat::bf16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Number of [`bf16`] significant digits in base 2\n","sig":null,"attributes":[{"value":"/ Number of [`bf16`] significant digits in base 2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29648,"byte_end":29699,"line_start":654,"line_end":654,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":142},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29792,"byte_end":29795,"line_start":657,"line_end":657,"column_start":15,"column_end":18},"name":"MAX","qualname":"::bfloat::bf16::MAX","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Largest finite [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Largest finite [`bf16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29744,"byte_end":29777,"line_start":656,"line_end":656,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":143},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29887,"byte_end":29897,"line_start":659,"line_end":659,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::bfloat::bf16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`] power of 10 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29822,"byte_end":29872,"line_start":658,"line_end":658,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":144},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29977,"byte_end":29984,"line_start":661,"line_end":661,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::bfloat::bf16::MAX_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`] power of 2 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":29913,"byte_end":29962,"line_start":660,"line_end":660,"column_start":5,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":145},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30050,"byte_end":30053,"line_start":663,"line_end":663,"column_start":15,"column_end":18},"name":"MIN","qualname":"::bfloat::bf16::MIN","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Smallest finite [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Smallest finite [`bf16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30001,"byte_end":30035,"line_start":662,"line_end":662,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":146},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30152,"byte_end":30162,"line_start":665,"line_end":665,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::bfloat::bf16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Minimum possible normal [`bf16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`bf16`] power of 10 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30080,"byte_end":30137,"line_start":664,"line_end":664,"column_start":5,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":147},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30271,"byte_end":30278,"line_start":667,"line_end":667,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::bfloat::bf16::MIN_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`bf16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`bf16`] power of 2 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30179,"byte_end":30256,"line_start":666,"line_end":666,"column_start":5,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":148},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30354,"byte_end":30366,"line_start":669,"line_end":669,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::bfloat::bf16::MIN_POSITIVE","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Smallest positive normal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`bf16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30296,"byte_end":30339,"line_start":668,"line_end":668,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30442,"byte_end":30445,"line_start":671,"line_end":671,"column_start":15,"column_end":18},"name":"NAN","qualname":"::bfloat::bf16::NAN","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] Not a Number (NaN)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Not a Number (NaN)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30396,"byte_end":30427,"line_start":670,"line_end":670,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30528,"byte_end":30540,"line_start":673,"line_end":673,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::bfloat::bf16::NEG_INFINITY","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`bf16`] negative infinity (-∞).","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30475,"byte_end":30513,"line_start":672,"line_end":672,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30649,"byte_end":30654,"line_start":675,"line_end":675,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::bfloat::bf16::RADIX","value":"u32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`bf16`]\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`bf16`]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30570,"byte_end":30634,"line_start":674,"line_end":674,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30730,"byte_end":30752,"line_start":678,"line_end":678,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::bfloat::bf16::MIN_POSITIVE_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`bf16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30670,"byte_end":30715,"line_start":677,"line_end":677,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30833,"byte_end":30846,"line_start":680,"line_end":680,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::bfloat::bf16::MAX_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Maximum subnormal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`bf16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30782,"byte_end":30818,"line_start":679,"line_end":679,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30906,"byte_end":30909,"line_start":683,"line_end":683,"column_start":15,"column_end":18},"name":"ONE","qualname":"::bfloat::bf16::ONE","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 1\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30877,"byte_end":30891,"line_start":682,"line_end":682,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30968,"byte_end":30972,"line_start":685,"line_end":685,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::bfloat::bf16::ZERO","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 0\n","sig":null,"attributes":[{"value":"/ [`bf16`] 0","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":30939,"byte_end":30953,"line_start":684,"line_end":684,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31032,"byte_end":31040,"line_start":687,"line_end":687,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::bfloat::bf16::NEG_ZERO","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] -0\n","sig":null,"attributes":[{"value":"/ [`bf16`] -0","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31002,"byte_end":31017,"line_start":686,"line_end":686,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31100,"byte_end":31107,"line_start":689,"line_end":689,"column_start":15,"column_end":22},"name":"NEG_ONE","qualname":"::bfloat::bf16::NEG_ONE","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] -1\n","sig":null,"attributes":[{"value":"/ [`bf16`] -1","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31070,"byte_end":31085,"line_start":688,"line_end":688,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31186,"byte_end":31187,"line_start":692,"line_end":692,"column_start":15,"column_end":16},"name":"E","qualname":"::bfloat::bf16::E","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] Euler's number (ℯ)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Euler's number (ℯ)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31138,"byte_end":31171,"line_start":691,"line_end":691,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31270,"byte_end":31272,"line_start":694,"line_end":694,"column_start":15,"column_end":17},"name":"PI","qualname":"::bfloat::bf16::PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Archimedes' constant (π)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31217,"byte_end":31255,"line_start":693,"line_end":693,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":160},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31334,"byte_end":31343,"line_start":696,"line_end":696,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::bfloat::bf16::FRAC_1_PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 1/π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1/π","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31302,"byte_end":31319,"line_start":695,"line_end":695,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":161},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31407,"byte_end":31420,"line_start":698,"line_end":698,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::bfloat::bf16::FRAC_1_SQRT_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 1/√2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1/√2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31373,"byte_end":31392,"line_start":697,"line_end":697,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":162},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31482,"byte_end":31491,"line_start":700,"line_end":700,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::bfloat::bf16::FRAC_2_PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 2/π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 2/π","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31450,"byte_end":31467,"line_start":699,"line_end":699,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":163},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31556,"byte_end":31570,"line_start":702,"line_end":702,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::bfloat::bf16::FRAC_2_SQRT_PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 2/√π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 2/√π","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31521,"byte_end":31541,"line_start":701,"line_end":701,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31632,"byte_end":31641,"line_start":704,"line_end":704,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::bfloat::bf16::FRAC_PI_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/2\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31600,"byte_end":31617,"line_start":703,"line_end":703,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":165},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31703,"byte_end":31712,"line_start":706,"line_end":706,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::bfloat::bf16::FRAC_PI_3","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/3\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/3","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31671,"byte_end":31688,"line_start":705,"line_end":705,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":166},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31774,"byte_end":31783,"line_start":708,"line_end":708,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::bfloat::bf16::FRAC_PI_4","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/4\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/4","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31742,"byte_end":31759,"line_start":707,"line_end":707,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":167},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31845,"byte_end":31854,"line_start":710,"line_end":710,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::bfloat::bf16::FRAC_PI_6","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/6\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/6","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31813,"byte_end":31830,"line_start":709,"line_end":709,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":168},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31916,"byte_end":31925,"line_start":712,"line_end":712,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::bfloat::bf16::FRAC_PI_8","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/8\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/8","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31884,"byte_end":31901,"line_start":711,"line_end":711,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":169},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31994,"byte_end":31999,"line_start":714,"line_end":714,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::bfloat::bf16::LN_10","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗇 10","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":31955,"byte_end":31979,"line_start":713,"line_end":713,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":170},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32067,"byte_end":32071,"line_start":716,"line_end":716,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::bfloat::bf16::LN_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗇 2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32029,"byte_end":32052,"line_start":715,"line_end":715,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":171},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32150,"byte_end":32157,"line_start":718,"line_end":718,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::bfloat::bf16::LOG10_E","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32101,"byte_end":32135,"line_start":717,"line_end":717,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":172},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32234,"byte_end":32241,"line_start":720,"line_end":720,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::bfloat::bf16::LOG10_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₁₀2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32187,"byte_end":32219,"line_start":719,"line_end":719,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":173},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32317,"byte_end":32323,"line_start":722,"line_end":722,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::bfloat::bf16::LOG2_E","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32271,"byte_end":32302,"line_start":721,"line_end":721,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":174},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32398,"byte_end":32405,"line_start":724,"line_end":724,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::bfloat::bf16::LOG2_10","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₂10","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32353,"byte_end":32383,"line_start":723,"line_end":723,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":175},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32467,"byte_end":32473,"line_start":726,"line_end":726,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::bfloat::bf16::SQRT_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] √2\n","sig":null,"attributes":[{"value":"/ [`bf16`] √2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32435,"byte_end":32452,"line_start":725,"line_end":725,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32549,"byte_end":32553,"line_start":731,"line_end":731,"column_start":8,"column_end":12},"name":"from","qualname":"<f32 as std::convert::From>::from","value":"fn from(bf16) -> f32","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32532,"byte_end":32541,"line_start":730,"line_end":730,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32647,"byte_end":32651,"line_start":738,"line_end":738,"column_start":8,"column_end":12},"name":"from","qualname":"<f64 as std::convert::From>::from","value":"fn from(bf16) -> f64","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32630,"byte_end":32639,"line_start":737,"line_end":737,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32744,"byte_end":32748,"line_start":745,"line_end":745,"column_start":8,"column_end":12},"name":"from","qualname":"<bf16 as std::convert::From>::from","value":"fn from(i8) -> bf16","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32727,"byte_end":32736,"line_start":744,"line_end":744,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32898,"byte_end":32902,"line_start":753,"line_end":753,"column_start":8,"column_end":12},"name":"from","qualname":"<bf16 as std::convert::From>::from","value":"fn from(u8) -> bf16","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32881,"byte_end":32890,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":33038,"byte_end":33040,"line_start":760,"line_end":760,"column_start":8,"column_end":10},"name":"eq","qualname":"<bf16 as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &bf16) -> bool","parent":{"krate":2,"index":2831},"children":[],"decl_id":{"krate":2,"index":2833},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":33278,"byte_end":33289,"line_start":770,"line_end":770,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<bf16 as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp(&Self, &bf16) -> Option<Ordering>","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2879},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":34225,"byte_end":34227,"line_start":797,"line_end":797,"column_start":8,"column_end":10},"name":"lt","qualname":"<bf16 as std::cmp::PartialOrd>::lt","value":"fn lt(&Self, &bf16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2880},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":34727,"byte_end":34729,"line_start":812,"line_end":812,"column_start":8,"column_end":10},"name":"le","qualname":"<bf16 as std::cmp::PartialOrd>::le","value":"fn le(&Self, &bf16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2881},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":35230,"byte_end":35232,"line_start":827,"line_end":827,"column_start":8,"column_end":10},"name":"gt","qualname":"<bf16 as std::cmp::PartialOrd>::gt","value":"fn gt(&Self, &bf16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2882},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":35732,"byte_end":35734,"line_start":842,"line_end":842,"column_start":8,"column_end":10},"name":"ge","qualname":"<bf16 as std::cmp::PartialOrd>::ge","value":"fn ge(&Self, &bf16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36328,"byte_end":36336,"line_start":861,"line_end":861,"column_start":8,"column_end":16},"name":"from_str","qualname":"<bf16 as std::str::FromStr>::from_str","value":"fn from_str(&str) -> Result<bf16, ParseFloatError>","parent":{"krate":2,"index":12765},"children":[],"decl_id":{"krate":2,"index":12767},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36503,"byte_end":36506,"line_start":868,"line_end":868,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10108},"children":[],"decl_id":{"krate":2,"index":10109},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36676,"byte_end":36679,"line_start":875,"line_end":875,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10115},"children":[],"decl_id":{"krate":2,"index":10116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36848,"byte_end":36851,"line_start":882,"line_end":882,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10127},"children":[],"decl_id":{"krate":2,"index":10128},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37022,"byte_end":37025,"line_start":889,"line_end":889,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10129},"children":[],"decl_id":{"krate":2,"index":10130},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37194,"byte_end":37197,"line_start":896,"line_end":896,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10119},"children":[],"decl_id":{"krate":2,"index":10120},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37358,"byte_end":37361,"line_start":903,"line_end":903,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37525,"byte_end":37528,"line_start":910,"line_end":910,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10121},"children":[],"decl_id":{"krate":2,"index":10122},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37692,"byte_end":37695,"line_start":917,"line_end":917,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10123},"children":[],"decl_id":{"krate":2,"index":10124},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37844,"byte_end":37847,"line_start":925,"line_end":925,"column_start":8,"column_end":11},"name":"neg","qualname":"<bf16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3274},"children":[],"decl_id":{"krate":2,"index":3276},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37995,"byte_end":37998,"line_start":934,"line_end":934,"column_start":8,"column_end":11},"name":"neg","qualname":"<&'_ bf16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3274},"children":[],"decl_id":{"krate":2,"index":3276},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37978,"byte_end":37987,"line_start":933,"line_end":933,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38108,"byte_end":38111,"line_start":942,"line_end":942,"column_start":8,"column_end":11},"name":"add","qualname":"<bf16 as std::ops::Add>::add","value":"fn add(Self, Self) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38315,"byte_end":38318,"line_start":951,"line_end":951,"column_start":8,"column_end":11},"name":"add","qualname":"<bf16 as std::ops::Add>::add","value":"fn add(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38298,"byte_end":38307,"line_start":950,"line_end":950,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38484,"byte_end":38487,"line_start":960,"line_end":960,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ bf16 as std::ops::Add>::add","value":"fn add(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38467,"byte_end":38476,"line_start":959,"line_end":959,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38655,"byte_end":38658,"line_start":969,"line_end":969,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ bf16 as std::ops::Add>::add","value":"fn add(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38638,"byte_end":38647,"line_start":968,"line_end":968,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38775,"byte_end":38785,"line_start":976,"line_end":976,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<bf16 as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Self)","parent":{"krate":2,"index":3278},"children":[],"decl_id":{"krate":2,"index":3280},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38758,"byte_end":38767,"line_start":975,"line_end":975,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38907,"byte_end":38917,"line_start":983,"line_end":983,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<bf16 as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, &bf16)","parent":{"krate":2,"index":3278},"children":[],"decl_id":{"krate":2,"index":3280},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38890,"byte_end":38899,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39038,"byte_end":39041,"line_start":991,"line_end":991,"column_start":8,"column_end":11},"name":"sub","qualname":"<bf16 as std::ops::Sub>::sub","value":"fn sub(Self, Self) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39245,"byte_end":39248,"line_start":1000,"line_end":1000,"column_start":8,"column_end":11},"name":"sub","qualname":"<bf16 as std::ops::Sub>::sub","value":"fn sub(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39228,"byte_end":39237,"line_start":999,"line_end":999,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39414,"byte_end":39417,"line_start":1009,"line_end":1009,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ bf16 as std::ops::Sub>::sub","value":"fn sub(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39397,"byte_end":39406,"line_start":1008,"line_end":1008,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39585,"byte_end":39588,"line_start":1018,"line_end":1018,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ bf16 as std::ops::Sub>::sub","value":"fn sub(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39568,"byte_end":39577,"line_start":1017,"line_end":1017,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39705,"byte_end":39715,"line_start":1025,"line_end":1025,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<bf16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Self)","parent":{"krate":2,"index":3282},"children":[],"decl_id":{"krate":2,"index":3284},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39688,"byte_end":39697,"line_start":1024,"line_end":1024,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39837,"byte_end":39847,"line_start":1032,"line_end":1032,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<bf16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, &bf16)","parent":{"krate":2,"index":3282},"children":[],"decl_id":{"krate":2,"index":3284},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39820,"byte_end":39829,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39968,"byte_end":39971,"line_start":1040,"line_end":1040,"column_start":8,"column_end":11},"name":"mul","qualname":"<bf16 as std::ops::Mul>::mul","value":"fn mul(Self, Self) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40175,"byte_end":40178,"line_start":1049,"line_end":1049,"column_start":8,"column_end":11},"name":"mul","qualname":"<bf16 as std::ops::Mul>::mul","value":"fn mul(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40158,"byte_end":40167,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40344,"byte_end":40347,"line_start":1058,"line_end":1058,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ bf16 as std::ops::Mul>::mul","value":"fn mul(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40327,"byte_end":40336,"line_start":1057,"line_end":1057,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40515,"byte_end":40518,"line_start":1067,"line_end":1067,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ bf16 as std::ops::Mul>::mul","value":"fn mul(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40498,"byte_end":40507,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40635,"byte_end":40645,"line_start":1074,"line_end":1074,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<bf16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Self)","parent":{"krate":2,"index":3286},"children":[],"decl_id":{"krate":2,"index":3288},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40618,"byte_end":40627,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40767,"byte_end":40777,"line_start":1081,"line_end":1081,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<bf16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, &bf16)","parent":{"krate":2,"index":3286},"children":[],"decl_id":{"krate":2,"index":3288},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40750,"byte_end":40759,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40898,"byte_end":40901,"line_start":1089,"line_end":1089,"column_start":8,"column_end":11},"name":"div","qualname":"<bf16 as std::ops::Div>::div","value":"fn div(Self, Self) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41105,"byte_end":41108,"line_start":1098,"line_end":1098,"column_start":8,"column_end":11},"name":"div","qualname":"<bf16 as std::ops::Div>::div","value":"fn div(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41088,"byte_end":41097,"line_start":1097,"line_end":1097,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41274,"byte_end":41277,"line_start":1107,"line_end":1107,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ bf16 as std::ops::Div>::div","value":"fn div(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41257,"byte_end":41266,"line_start":1106,"line_end":1106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41445,"byte_end":41448,"line_start":1116,"line_end":1116,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ bf16 as std::ops::Div>::div","value":"fn div(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41428,"byte_end":41437,"line_start":1115,"line_end":1115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41565,"byte_end":41575,"line_start":1123,"line_end":1123,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<bf16 as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Self)","parent":{"krate":2,"index":3290},"children":[],"decl_id":{"krate":2,"index":3292},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41548,"byte_end":41557,"line_start":1122,"line_end":1122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41697,"byte_end":41707,"line_start":1130,"line_end":1130,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<bf16 as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, &bf16)","parent":{"krate":2,"index":3290},"children":[],"decl_id":{"krate":2,"index":3292},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41680,"byte_end":41689,"line_start":1129,"line_end":1129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41828,"byte_end":41831,"line_start":1138,"line_end":1138,"column_start":8,"column_end":11},"name":"rem","qualname":"<bf16 as std::ops::Rem>::rem","value":"fn rem(Self, Self) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42035,"byte_end":42038,"line_start":1147,"line_end":1147,"column_start":8,"column_end":11},"name":"rem","qualname":"<bf16 as std::ops::Rem>::rem","value":"fn rem(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42018,"byte_end":42027,"line_start":1146,"line_end":1146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42204,"byte_end":42207,"line_start":1156,"line_end":1156,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ bf16 as std::ops::Rem>::rem","value":"fn rem(Self, &bf16) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42187,"byte_end":42196,"line_start":1155,"line_end":1155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42375,"byte_end":42378,"line_start":1165,"line_end":1165,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ bf16 as std::ops::Rem>::rem","value":"fn rem(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42358,"byte_end":42367,"line_start":1164,"line_end":1164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42495,"byte_end":42505,"line_start":1172,"line_end":1172,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<bf16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, Self)","parent":{"krate":2,"index":3294},"children":[],"decl_id":{"krate":2,"index":3296},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42478,"byte_end":42487,"line_start":1171,"line_end":1171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42627,"byte_end":42637,"line_start":1179,"line_end":1179,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<bf16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, &bf16)","parent":{"krate":2,"index":3294},"children":[],"decl_id":{"krate":2,"index":3296},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42610,"byte_end":42619,"line_start":1178,"line_end":1178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42751,"byte_end":42758,"line_start":1186,"line_end":1186,"column_start":8,"column_end":15},"name":"product","qualname":"<bf16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8242},"children":[],"decl_id":{"krate":2,"index":8244},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42734,"byte_end":42743,"line_start":1185,"line_end":1185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42931,"byte_end":42938,"line_start":1193,"line_end":1193,"column_start":8,"column_end":15},"name":"product","qualname":"<bf16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = &'a bf16>","parent":{"krate":2,"index":8242},"children":[],"decl_id":{"krate":2,"index":8244},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42914,"byte_end":42923,"line_start":1192,"line_end":1192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43097,"byte_end":43100,"line_start":1200,"line_end":1200,"column_start":8,"column_end":11},"name":"sum","qualname":"<bf16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8238},"children":[],"decl_id":{"krate":2,"index":8240},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43080,"byte_end":43089,"line_start":1199,"line_end":1199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43265,"byte_end":43268,"line_start":1207,"line_end":1207,"column_start":8,"column_end":11},"name":"sum","qualname":"<bf16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = &'a bf16>","parent":{"krate":2,"index":8238},"children":[],"decl_id":{"krate":2,"index":8240},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43248,"byte_end":43257,"line_start":1206,"line_end":1206,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":818},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70612,"byte_end":70615,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"f16","qualname":"::binary16::f16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`\n format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":69708,"byte_end":69806,"line_start":24,"line_end":24,"column_start":1,"column_end":99}},{"value":"/ format.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":69807,"byte_end":69818,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":69819,"byte_end":69822,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This 16-bit floating point type is intended for efficient storage where the full range and","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":69823,"byte_end":69917,"line_start":27,"line_end":27,"column_start":1,"column_end":95}},{"value":"/ precision of a larger floating point value is not required. Because [`f16`] is primarily for","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":69918,"byte_end":70014,"line_start":28,"line_end":28,"column_start":1,"column_end":97}},{"value":"/ efficient storage, floating point operations such as addition, multiplication, etc. are not","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70015,"byte_end":70110,"line_start":29,"line_end":29,"column_start":1,"column_end":96}},{"value":"/ implemented. Operations should be performed with [`f32`] or higher-precision types and converted","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70111,"byte_end":70211,"line_start":30,"line_end":30,"column_start":1,"column_end":101}},{"value":"/ to/from [`f16`] as necessary.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70212,"byte_end":70245,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70246,"byte_end":70249,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70250,"byte_end":70334,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70335,"byte_end":70365,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70398,"byte_end":70418,"line_start":36,"line_end":36,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70749,"byte_end":70758,"line_start":46,"line_end":46,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<f16>::from_bits","value":"const fn from_bits(u16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from the raw bits.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70638,"byte_end":70701,"line_start":43,"line_end":43,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70706,"byte_end":70715,"line_start":44,"line_end":44,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70720,"byte_end":70731,"line_start":45,"line_end":45,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71339,"byte_end":71347,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<f16>::from_f32","value":"fn from_f32(f32) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 32-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70808,"byte_end":70888,"line_start":50,"line_end":50,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70893,"byte_end":70896,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70901,"byte_end":70989,"line_start":52,"line_end":52,"column_start":5,"column_end":90}},{"value":"/ preserved. 32-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70994,"byte_end":71088,"line_start":53,"line_end":53,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71093,"byte_end":71187,"line_start":54,"line_end":54,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71192,"byte_end":71282,"line_start":55,"line_end":55,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71287,"byte_end":71297,"line_start":56,"line_end":56,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71302,"byte_end":71311,"line_start":57,"line_end":57,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71316,"byte_end":71327,"line_start":58,"line_end":58,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72198,"byte_end":72212,"line_start":76,"line_end":76,"column_start":18,"column_end":32},"name":"from_f32_const","qualname":"<f16>::from_f32_const","value":"const fn from_f32_const(f32) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 32-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71420,"byte_end":71500,"line_start":63,"line_end":63,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71505,"byte_end":71508,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f32`][Self::from_f32] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71513,"byte_end":71605,"line_start":65,"line_end":65,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f32`][Self::from_f32] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71610,"byte_end":71705,"line_start":66,"line_end":66,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71710,"byte_end":71741,"line_start":67,"line_end":67,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71746,"byte_end":71749,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71754,"byte_end":71842,"line_start":69,"line_end":69,"column_start":5,"column_end":90}},{"value":"/ preserved. 32-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71847,"byte_end":71941,"line_start":70,"line_end":70,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":71946,"byte_end":72040,"line_start":71,"line_end":71,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72045,"byte_end":72135,"line_start":72,"line_end":72,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72140,"byte_end":72150,"line_start":73,"line_end":73,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72155,"byte_end":72164,"line_start":74,"line_end":74,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72169,"byte_end":72180,"line_start":75,"line_end":75,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72825,"byte_end":72833,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<f16>::from_f64","value":"fn from_f64(f64) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 64-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72294,"byte_end":72374,"line_start":80,"line_end":80,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72379,"byte_end":72382,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72387,"byte_end":72475,"line_start":82,"line_end":82,"column_start":5,"column_end":90}},{"value":"/ preserved. 64-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72480,"byte_end":72574,"line_start":83,"line_end":83,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72579,"byte_end":72673,"line_start":84,"line_end":84,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72678,"byte_end":72768,"line_start":85,"line_end":85,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72773,"byte_end":72783,"line_start":86,"line_end":86,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72788,"byte_end":72797,"line_start":87,"line_end":87,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72802,"byte_end":72813,"line_start":88,"line_end":88,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73684,"byte_end":73698,"line_start":106,"line_end":106,"column_start":18,"column_end":32},"name":"from_f64_const","qualname":"<f16>::from_f64_const","value":"const fn from_f64_const(f64) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 64-bit floating point value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72906,"byte_end":72986,"line_start":93,"line_end":93,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72991,"byte_end":72994,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f64`][Self::from_f64] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":72999,"byte_end":73091,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f64`][Self::from_f64] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73096,"byte_end":73191,"line_start":96,"line_end":96,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73196,"byte_end":73227,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73232,"byte_end":73235,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73240,"byte_end":73328,"line_start":99,"line_end":99,"column_start":5,"column_end":90}},{"value":"/ preserved. 64-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73333,"byte_end":73427,"line_start":100,"line_end":100,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73432,"byte_end":73526,"line_start":101,"line_end":101,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73531,"byte_end":73621,"line_start":102,"line_end":102,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73626,"byte_end":73636,"line_start":103,"line_end":103,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73641,"byte_end":73650,"line_start":104,"line_end":104,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73655,"byte_end":73666,"line_start":105,"line_end":105,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73890,"byte_end":73897,"line_start":113,"line_end":113,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<f16>::to_bits","value":"const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`f16`] into the underlying bit representation.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73780,"byte_end":73842,"line_start":110,"line_end":110,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73847,"byte_end":73856,"line_start":111,"line_end":111,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73861,"byte_end":73872,"line_start":112,"line_end":112,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74305,"byte_end":74316,"line_start":129,"line_end":129,"column_start":18,"column_end":29},"name":"to_le_bytes","qualname":"<f16>::to_le_bytes","value":"const fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":73939,"byte_end":74032,"line_start":117,"line_end":117,"column_start":5,"column_end":98}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74037,"byte_end":74066,"line_start":118,"line_end":118,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74071,"byte_end":74074,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74079,"byte_end":74093,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74098,"byte_end":74101,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74106,"byte_end":74117,"line_start":122,"line_end":122,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74122,"byte_end":74149,"line_start":123,"line_end":123,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74154,"byte_end":74204,"line_start":124,"line_end":124,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x40, 0x4A]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74209,"byte_end":74245,"line_start":125,"line_end":125,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74250,"byte_end":74257,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74262,"byte_end":74271,"line_start":127,"line_end":127,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74276,"byte_end":74287,"line_start":128,"line_end":128,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74749,"byte_end":74760,"line_start":145,"line_end":145,"column_start":18,"column_end":29},"name":"to_be_bytes","qualname":"<f16>::to_be_bytes","value":"const fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74376,"byte_end":74469,"line_start":133,"line_end":133,"column_start":5,"column_end":98}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74474,"byte_end":74510,"line_start":134,"line_end":134,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74515,"byte_end":74518,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74523,"byte_end":74537,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74542,"byte_end":74545,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74550,"byte_end":74561,"line_start":138,"line_end":138,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74566,"byte_end":74593,"line_start":139,"line_end":139,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74598,"byte_end":74648,"line_start":140,"line_end":140,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x4A, 0x40]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74653,"byte_end":74689,"line_start":141,"line_end":141,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74694,"byte_end":74701,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74706,"byte_end":74715,"line_start":143,"line_end":143,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74720,"byte_end":74731,"line_start":144,"line_end":144,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75484,"byte_end":75495,"line_start":169,"line_end":169,"column_start":18,"column_end":29},"name":"to_ne_bytes","qualname":"<f16>::to_ne_bytes","value":"const fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74820,"byte_end":74913,"line_start":149,"line_end":149,"column_start":5,"column_end":98}},{"value":"/ native byte order.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74918,"byte_end":74940,"line_start":150,"line_end":150,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74945,"byte_end":74948,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":74953,"byte_end":75033,"line_start":152,"line_end":152,"column_start":5,"column_end":85}},{"value":"/ [`to_be_bytes`][Self::to_be_bytes] or [`to_le_bytes`][Self::to_le_bytes], as appropriate,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75038,"byte_end":75131,"line_start":153,"line_end":153,"column_start":5,"column_end":98}},{"value":"/ instead.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75136,"byte_end":75148,"line_start":154,"line_end":154,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75153,"byte_end":75156,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75161,"byte_end":75175,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75180,"byte_end":75183,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75188,"byte_end":75199,"line_start":158,"line_end":158,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75204,"byte_end":75231,"line_start":159,"line_end":159,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75236,"byte_end":75286,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75291,"byte_end":75345,"line_start":161,"line_end":161,"column_start":5,"column_end":59}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75350,"byte_end":75370,"line_start":162,"line_end":162,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75375,"byte_end":75387,"line_start":163,"line_end":163,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75392,"byte_end":75412,"line_start":164,"line_end":164,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75417,"byte_end":75424,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75429,"byte_end":75436,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75441,"byte_end":75450,"line_start":167,"line_end":167,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75455,"byte_end":75466,"line_start":168,"line_end":168,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75892,"byte_end":75905,"line_start":184,"line_end":184,"column_start":18,"column_end":31},"name":"from_le_bytes","qualname":"<f16>::from_le_bytes","value":"const fn from_le_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75555,"byte_end":75647,"line_start":173,"line_end":173,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75652,"byte_end":75655,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75660,"byte_end":75674,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75679,"byte_end":75682,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75687,"byte_end":75698,"line_start":177,"line_end":177,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75703,"byte_end":75730,"line_start":178,"line_end":178,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_le_bytes([0x40, 0x4A]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75735,"byte_end":75784,"line_start":179,"line_end":179,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75789,"byte_end":75832,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75837,"byte_end":75844,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75849,"byte_end":75858,"line_start":182,"line_end":182,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75863,"byte_end":75874,"line_start":183,"line_end":183,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76326,"byte_end":76339,"line_start":199,"line_end":199,"column_start":18,"column_end":31},"name":"from_be_bytes","qualname":"<f16>::from_be_bytes","value":"const fn from_be_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":75992,"byte_end":76081,"line_start":188,"line_end":188,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76086,"byte_end":76089,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76094,"byte_end":76108,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76113,"byte_end":76116,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76121,"byte_end":76132,"line_start":192,"line_end":192,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76137,"byte_end":76164,"line_start":193,"line_end":193,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_be_bytes([0x4A, 0x40]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76169,"byte_end":76218,"line_start":194,"line_end":194,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76223,"byte_end":76266,"line_start":195,"line_end":195,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76271,"byte_end":76278,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76283,"byte_end":76292,"line_start":197,"line_end":197,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76297,"byte_end":76308,"line_start":198,"line_end":198,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77084,"byte_end":77097,"line_start":222,"line_end":222,"column_start":18,"column_end":31},"name":"from_ne_bytes","qualname":"<f16>::from_ne_bytes","value":"const fn from_ne_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76426,"byte_end":76518,"line_start":203,"line_end":203,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76523,"byte_end":76526,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76531,"byte_end":76620,"line_start":205,"line_end":205,"column_start":5,"column_end":94}},{"value":"/ [`from_be_bytes`][Self::from_be_bytes] or [`from_le_bytes`][Self::from_le_bytes], as","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76625,"byte_end":76713,"line_start":206,"line_end":206,"column_start":5,"column_end":93}},{"value":"/ appropriate instead.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76718,"byte_end":76742,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76747,"byte_end":76750,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76755,"byte_end":76769,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76774,"byte_end":76777,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76782,"byte_end":76793,"line_start":211,"line_end":211,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76798,"byte_end":76825,"line_start":212,"line_end":212,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76830,"byte_end":76897,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76902,"byte_end":76922,"line_start":214,"line_end":214,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76927,"byte_end":76939,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76944,"byte_end":76964,"line_start":216,"line_end":216,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76969,"byte_end":76976,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":76981,"byte_end":77024,"line_start":218,"line_end":218,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77029,"byte_end":77036,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77041,"byte_end":77050,"line_start":220,"line_end":220,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77055,"byte_end":77066,"line_start":221,"line_end":221,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77415,"byte_end":77421,"line_start":232,"line_end":232,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<f16>::to_f32","value":"fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f32` value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77184,"byte_end":77232,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77237,"byte_end":77240,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77245,"byte_end":77339,"line_start":228,"line_end":228,"column_start":5,"column_end":99}},{"value":"/ in 32-bit floating point.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77344,"byte_end":77373,"line_start":229,"line_end":229,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77378,"byte_end":77387,"line_start":230,"line_end":230,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77392,"byte_end":77403,"line_start":231,"line_end":231,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77954,"byte_end":77966,"line_start":246,"line_end":246,"column_start":18,"column_end":30},"name":"to_f32_const","qualname":"<f16>::to_f32_const","value":"const fn to_f32_const(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f32` value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77484,"byte_end":77532,"line_start":236,"line_end":236,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77537,"byte_end":77540,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f32`][Self::to_f32] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77545,"byte_end":77633,"line_start":238,"line_end":238,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f32`][Self::to_f32] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77638,"byte_end":77729,"line_start":239,"line_end":239,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77734,"byte_end":77765,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77770,"byte_end":77773,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77778,"byte_end":77872,"line_start":242,"line_end":242,"column_start":5,"column_end":99}},{"value":"/ in 32-bit floating point.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77877,"byte_end":77906,"line_start":243,"line_end":243,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77911,"byte_end":77920,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":77925,"byte_end":77936,"line_start":245,"line_end":245,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78269,"byte_end":78275,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<f16>::to_f64","value":"fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f64` value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78038,"byte_end":78086,"line_start":250,"line_end":250,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78091,"byte_end":78094,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78099,"byte_end":78193,"line_start":252,"line_end":252,"column_start":5,"column_end":99}},{"value":"/ in 64-bit floating point.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78198,"byte_end":78227,"line_start":253,"line_end":253,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78232,"byte_end":78241,"line_start":254,"line_end":254,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78246,"byte_end":78257,"line_start":255,"line_end":255,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78808,"byte_end":78820,"line_start":270,"line_end":270,"column_start":18,"column_end":30},"name":"to_f64_const","qualname":"<f16>::to_f64_const","value":"const fn to_f64_const(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f64` value.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78338,"byte_end":78386,"line_start":260,"line_end":260,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78391,"byte_end":78394,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f64`][Self::to_f64] except it never uses hardware","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78399,"byte_end":78487,"line_start":262,"line_end":262,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f64`][Self::to_f64] should be preferred","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78492,"byte_end":78583,"line_start":263,"line_end":263,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78588,"byte_end":78619,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78624,"byte_end":78627,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78632,"byte_end":78726,"line_start":266,"line_end":266,"column_start":5,"column_end":99}},{"value":"/ in 64-bit floating point.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78731,"byte_end":78760,"line_start":267,"line_end":267,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78765,"byte_end":78774,"line_start":268,"line_end":268,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78779,"byte_end":78790,"line_start":269,"line_end":269,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79244,"byte_end":79250,"line_start":289,"line_end":289,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<f16>::is_nan","value":"const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is `NaN` and `false` otherwise.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78892,"byte_end":78956,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78961,"byte_end":78964,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78969,"byte_end":78983,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78988,"byte_end":78991,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":78996,"byte_end":79007,"line_start":278,"line_end":278,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79012,"byte_end":79039,"line_start":279,"line_end":279,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79044,"byte_end":79047,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79052,"byte_end":79075,"line_start":281,"line_end":281,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79080,"byte_end":79115,"line_start":282,"line_end":282,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79120,"byte_end":79123,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79128,"byte_end":79154,"line_start":284,"line_end":284,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79159,"byte_end":79184,"line_start":285,"line_end":285,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79189,"byte_end":79196,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79201,"byte_end":79210,"line_start":287,"line_end":287,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79215,"byte_end":79226,"line_start":288,"line_end":288,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79846,"byte_end":79857,"line_start":314,"line_end":314,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<f16>::is_infinite","value":"const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false`.\n otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79317,"byte_end":79371,"line_start":293,"line_end":293,"column_start":5,"column_end":56}},{"value":"/ otherwise.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79376,"byte_end":79390,"line_start":294,"line_end":294,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79395,"byte_end":79398,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79403,"byte_end":79417,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79422,"byte_end":79425,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79430,"byte_end":79441,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79446,"byte_end":79473,"line_start":299,"line_end":299,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79478,"byte_end":79481,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79486,"byte_end":79520,"line_start":301,"line_end":301,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79525,"byte_end":79553,"line_start":302,"line_end":302,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79558,"byte_end":79594,"line_start":303,"line_end":303,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79599,"byte_end":79622,"line_start":304,"line_end":304,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79627,"byte_end":79630,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79635,"byte_end":79665,"line_start":306,"line_end":306,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79670,"byte_end":79702,"line_start":307,"line_end":307,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79707,"byte_end":79710,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79715,"byte_end":79746,"line_start":309,"line_end":309,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79751,"byte_end":79786,"line_start":310,"line_end":310,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79791,"byte_end":79798,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79803,"byte_end":79812,"line_start":312,"line_end":312,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79817,"byte_end":79828,"line_start":313,"line_end":313,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80438,"byte_end":80447,"line_start":338,"line_end":338,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<f16>::is_finite","value":"const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor `NaN`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79925,"byte_end":79989,"line_start":318,"line_end":318,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":79994,"byte_end":79997,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80002,"byte_end":80016,"line_start":320,"line_end":320,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80021,"byte_end":80024,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80029,"byte_end":80040,"line_start":322,"line_end":322,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80045,"byte_end":80072,"line_start":323,"line_end":323,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80077,"byte_end":80080,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80085,"byte_end":80119,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80124,"byte_end":80152,"line_start":326,"line_end":326,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80157,"byte_end":80193,"line_start":327,"line_end":327,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80198,"byte_end":80221,"line_start":328,"line_end":328,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80226,"byte_end":80229,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80234,"byte_end":80261,"line_start":330,"line_end":330,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80266,"byte_end":80269,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80274,"byte_end":80304,"line_start":332,"line_end":332,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80309,"byte_end":80339,"line_start":333,"line_end":333,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80344,"byte_end":80378,"line_start":334,"line_end":334,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80383,"byte_end":80390,"line_start":335,"line_end":335,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80395,"byte_end":80404,"line_start":336,"line_end":336,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80409,"byte_end":80420,"line_start":337,"line_end":337,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81217,"byte_end":81226,"line_start":365,"line_end":365,"column_start":18,"column_end":27},"name":"is_normal","qualname":"<f16>::is_normal","value":"const fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80515,"byte_end":80595,"line_start":342,"line_end":342,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80600,"byte_end":80603,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80608,"byte_end":80622,"line_start":344,"line_end":344,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80627,"byte_end":80630,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80635,"byte_end":80646,"line_start":346,"line_end":346,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80651,"byte_end":80678,"line_start":347,"line_end":347,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80683,"byte_end":80686,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let min = f16::MIN_POSITIVE;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80691,"byte_end":80723,"line_start":349,"line_end":349,"column_start":5,"column_end":37}},{"value":"/ let max = f16::MAX;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80728,"byte_end":80751,"line_start":350,"line_end":350,"column_start":5,"column_end":28}},{"value":"/ let lower_than_min = f16::from_f32(1.0e-10_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80756,"byte_end":80808,"line_start":351,"line_end":351,"column_start":5,"column_end":57}},{"value":"/ let zero = f16::from_f32(0.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80813,"byte_end":80851,"line_start":352,"line_end":352,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80856,"byte_end":80859,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80864,"byte_end":80893,"line_start":354,"line_end":354,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80898,"byte_end":80927,"line_start":355,"line_end":355,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80932,"byte_end":80935,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80940,"byte_end":80971,"line_start":357,"line_end":357,"column_start":5,"column_end":36}},{"value":"/ assert!(!f16::NAN.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":80976,"byte_end":81011,"line_start":358,"line_end":358,"column_start":5,"column_end":40}},{"value":"/ assert!(!f16::INFINITY.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81016,"byte_end":81056,"line_start":359,"line_end":359,"column_start":5,"column_end":45}},{"value":"/ // Values between `0` and `min` are Subnormal.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81061,"byte_end":81111,"line_start":360,"line_end":360,"column_start":5,"column_end":55}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81116,"byte_end":81157,"line_start":361,"line_end":361,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81162,"byte_end":81169,"line_start":362,"line_end":362,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81174,"byte_end":81183,"line_start":363,"line_end":363,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81188,"byte_end":81199,"line_start":364,"line_end":364,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81882,"byte_end":81890,"line_start":388,"line_end":388,"column_start":18,"column_end":26},"name":"classify","qualname":"<f16>::classify","value":"const fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81329,"byte_end":81383,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81388,"byte_end":81391,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81396,"byte_end":81486,"line_start":372,"line_end":372,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81491,"byte_end":81513,"line_start":373,"line_end":373,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81518,"byte_end":81521,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81526,"byte_end":81540,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81545,"byte_end":81548,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81553,"byte_end":81564,"line_start":377,"line_end":377,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81569,"byte_end":81598,"line_start":378,"line_end":378,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81603,"byte_end":81630,"line_start":379,"line_end":379,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81635,"byte_end":81638,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ let num = f16::from_f32(12.4_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81643,"byte_end":81681,"line_start":381,"line_end":381,"column_start":5,"column_end":43}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81686,"byte_end":81714,"line_start":382,"line_end":382,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81719,"byte_end":81722,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81727,"byte_end":81778,"line_start":384,"line_end":384,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81783,"byte_end":81836,"line_start":385,"line_end":385,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81841,"byte_end":81848,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":81853,"byte_end":81864,"line_start":387,"line_end":387,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82903,"byte_end":82909,"line_start":419,"line_end":419,"column_start":18,"column_end":24},"name":"signum","qualname":"<f16>::signum","value":"const fn signum(Self) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82258,"byte_end":82314,"line_start":400,"line_end":400,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82319,"byte_end":82322,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or [`INFINITY`][f16::INFINITY]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82327,"byte_end":82403,"line_start":402,"line_end":402,"column_start":5,"column_end":81}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or [`NEG_INFINITY`][f16::NEG_INFINITY]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82408,"byte_end":82493,"line_start":403,"line_end":403,"column_start":5,"column_end":90}},{"value":"/ * [`NAN`][f16::NAN] if the number is `NaN`","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82498,"byte_end":82544,"line_start":404,"line_end":404,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82549,"byte_end":82552,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82557,"byte_end":82571,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82576,"byte_end":82579,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82584,"byte_end":82595,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82600,"byte_end":82627,"line_start":409,"line_end":409,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82632,"byte_end":82635,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(3.5_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82640,"byte_end":82675,"line_start":411,"line_end":411,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82680,"byte_end":82683,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), f16::from_f32(1.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82688,"byte_end":82735,"line_start":413,"line_end":413,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(f16::NEG_INFINITY.signum(), f16::from_f32(-1.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82740,"byte_end":82804,"line_start":414,"line_end":414,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82809,"byte_end":82812,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.signum().is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82817,"byte_end":82857,"line_start":416,"line_end":416,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82862,"byte_end":82869,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":82874,"byte_end":82885,"line_start":418,"line_end":418,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83694,"byte_end":83710,"line_start":448,"line_end":448,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<f16>::is_sign_positive","value":"const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83099,"byte_end":83192,"line_start":429,"line_end":429,"column_start":5,"column_end":98}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83197,"byte_end":83228,"line_start":430,"line_end":430,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83233,"byte_end":83236,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83241,"byte_end":83255,"line_start":432,"line_end":432,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83260,"byte_end":83263,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83268,"byte_end":83279,"line_start":434,"line_end":434,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83284,"byte_end":83311,"line_start":435,"line_end":435,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83316,"byte_end":83319,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83324,"byte_end":83347,"line_start":437,"line_end":437,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83352,"byte_end":83387,"line_start":438,"line_end":438,"column_start":5,"column_end":40}},{"value":"/ let g = f16::from_f32(-7.0_f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83392,"byte_end":83428,"line_start":439,"line_end":439,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83433,"byte_end":83436,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83441,"byte_end":83475,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83480,"byte_end":83515,"line_start":442,"line_end":442,"column_start":5,"column_end":40}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83520,"byte_end":83567,"line_start":443,"line_end":443,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83572,"byte_end":83634,"line_start":444,"line_end":444,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83639,"byte_end":83646,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83651,"byte_end":83660,"line_start":446,"line_end":446,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83665,"byte_end":83676,"line_start":447,"line_end":447,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84365,"byte_end":84381,"line_start":471,"line_end":471,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<f16>::is_sign_negative","value":"const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83770,"byte_end":83863,"line_start":452,"line_end":452,"column_start":5,"column_end":98}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83868,"byte_end":83901,"line_start":453,"line_end":453,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83906,"byte_end":83909,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83914,"byte_end":83928,"line_start":455,"line_end":455,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83933,"byte_end":83936,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83941,"byte_end":83952,"line_start":457,"line_end":457,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83957,"byte_end":83984,"line_start":458,"line_end":458,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83989,"byte_end":83992,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":83997,"byte_end":84020,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84025,"byte_end":84059,"line_start":461,"line_end":461,"column_start":5,"column_end":39}},{"value":"/ let g = f16::from_f32(-7.0f32);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84064,"byte_end":84099,"line_start":462,"line_end":462,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84104,"byte_end":84107,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84112,"byte_end":84147,"line_start":464,"line_end":464,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84152,"byte_end":84186,"line_start":465,"line_end":465,"column_start":5,"column_end":39}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84191,"byte_end":84238,"line_start":466,"line_end":466,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84243,"byte_end":84305,"line_start":467,"line_end":467,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84310,"byte_end":84317,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84322,"byte_end":84331,"line_start":469,"line_end":469,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84336,"byte_end":84347,"line_start":470,"line_end":470,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85258,"byte_end":85266,"line_start":495,"line_end":495,"column_start":18,"column_end":26},"name":"copysign","qualname":"<f16>::copysign","value":"const fn copysign(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number composed of the magnitude of `self` and the sign of `sign`.","sig":null,"attributes":[{"value":"/ Returns a number composed of the magnitude of `self` and the sign of `sign`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84441,"byte_end":84521,"line_start":475,"line_end":475,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84526,"byte_end":84529,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Equal to `self` if the sign of `self` and `sign` are the same, otherwise equal to `-self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84534,"byte_end":84628,"line_start":477,"line_end":477,"column_start":5,"column_end":99}},{"value":"/ If `self` is NaN, then NaN with the sign of `sign` is returned.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84633,"byte_end":84700,"line_start":478,"line_end":478,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84705,"byte_end":84708,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84713,"byte_end":84727,"line_start":480,"line_end":480,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84732,"byte_end":84735,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84740,"byte_end":84747,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84752,"byte_end":84779,"line_start":483,"line_end":483,"column_start":5,"column_end":32}},{"value":"/ let f = f16::from_f32(3.5);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84784,"byte_end":84815,"line_start":484,"line_end":484,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84820,"byte_end":84823,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.copysign(f16::from_f32(0.42)), f16::from_f32(3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84828,"byte_end":84896,"line_start":486,"line_end":486,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(f.copysign(f16::from_f32(-0.42)), f16::from_f32(-3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84901,"byte_end":84971,"line_start":487,"line_end":487,"column_start":5,"column_end":75}},{"value":"/ assert_eq!((-f).copysign(f16::from_f32(0.42)), f16::from_f32(3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":84976,"byte_end":85047,"line_start":488,"line_end":488,"column_start":5,"column_end":76}},{"value":"/ assert_eq!((-f).copysign(f16::from_f32(-0.42)), f16::from_f32(-3.5));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85052,"byte_end":85125,"line_start":489,"line_end":489,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85130,"byte_end":85133,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.copysign(f16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85138,"byte_end":85198,"line_start":491,"line_end":491,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85203,"byte_end":85210,"line_start":492,"line_end":492,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85215,"byte_end":85224,"line_start":493,"line_end":493,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85229,"byte_end":85240,"line_start":494,"line_end":494,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85735,"byte_end":85738,"line_start":514,"line_end":514,"column_start":12,"column_end":15},"name":"max","qualname":"<f16>::max","value":"fn max(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85361,"byte_end":85404,"line_start":499,"line_end":499,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85409,"byte_end":85412,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85417,"byte_end":85489,"line_start":501,"line_end":501,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85494,"byte_end":85497,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85502,"byte_end":85516,"line_start":503,"line_end":503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85521,"byte_end":85524,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85529,"byte_end":85536,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85541,"byte_end":85568,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ let x = f16::from_f32(1.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85573,"byte_end":85604,"line_start":507,"line_end":507,"column_start":5,"column_end":36}},{"value":"/ let y = f16::from_f32(2.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85609,"byte_end":85640,"line_start":508,"line_end":508,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85645,"byte_end":85648,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.max(y), y);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85653,"byte_end":85681,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85686,"byte_end":85693,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85698,"byte_end":85707,"line_start":512,"line_end":512,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85712,"byte_end":85723,"line_start":513,"line_end":513,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86258,"byte_end":86261,"line_start":537,"line_end":537,"column_start":12,"column_end":15},"name":"min","qualname":"<f16>::min","value":"fn min(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85884,"byte_end":85927,"line_start":522,"line_end":522,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85932,"byte_end":85935,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":85940,"byte_end":86012,"line_start":524,"line_end":524,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86017,"byte_end":86020,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86025,"byte_end":86039,"line_start":526,"line_end":526,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86044,"byte_end":86047,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86052,"byte_end":86059,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86064,"byte_end":86091,"line_start":529,"line_end":529,"column_start":5,"column_end":32}},{"value":"/ let x = f16::from_f32(1.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86096,"byte_end":86127,"line_start":530,"line_end":530,"column_start":5,"column_end":36}},{"value":"/ let y = f16::from_f32(2.0);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86132,"byte_end":86163,"line_start":531,"line_end":531,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86168,"byte_end":86171,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.min(y), x);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86176,"byte_end":86204,"line_start":533,"line_end":533,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86209,"byte_end":86216,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86221,"byte_end":86230,"line_start":535,"line_end":535,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86235,"byte_end":86246,"line_start":536,"line_end":536,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87322,"byte_end":87327,"line_start":566,"line_end":566,"column_start":12,"column_end":17},"name":"clamp","qualname":"<f16>::clamp","value":"fn clamp(Self, f16, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Restrict a value to a certain interval unless it is NaN.","sig":null,"attributes":[{"value":"/ Restrict a value to a certain interval unless it is NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86407,"byte_end":86467,"line_start":545,"line_end":545,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86472,"byte_end":86475,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86480,"byte_end":86570,"line_start":547,"line_end":547,"column_start":5,"column_end":95}},{"value":"/ Otherwise this returns `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86575,"byte_end":86609,"line_start":548,"line_end":548,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86614,"byte_end":86617,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Note that this function returns NaN if the initial value was NaN as well.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86622,"byte_end":86699,"line_start":550,"line_end":550,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86704,"byte_end":86707,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86712,"byte_end":86724,"line_start":552,"line_end":552,"column_start":5,"column_end":17}},{"value":"/ Panics if `min > max`, `min` is NaN, or `max` is NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86729,"byte_end":86786,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86791,"byte_end":86794,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86799,"byte_end":86813,"line_start":555,"line_end":555,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86818,"byte_end":86821,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86826,"byte_end":86833,"line_start":557,"line_end":557,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86838,"byte_end":86865,"line_start":558,"line_end":558,"column_start":5,"column_end":32}},{"value":"/ assert!(f16::from_f32(-3.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(-2.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86870,"byte_end":86973,"line_start":559,"line_end":559,"column_start":5,"column_end":108}},{"value":"/ assert!(f16::from_f32(0.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(0.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":86978,"byte_end":87079,"line_start":560,"line_end":560,"column_start":5,"column_end":106}},{"value":"/ assert!(f16::from_f32(2.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(1.0));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87084,"byte_end":87185,"line_start":561,"line_end":561,"column_start":5,"column_end":106}},{"value":"/ assert!(f16::NAN.clamp(f16::from_f32(-2.0), f16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87190,"byte_end":87268,"line_start":562,"line_end":562,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87273,"byte_end":87280,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87285,"byte_end":87294,"line_start":564,"line_end":564,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87299,"byte_end":87310,"line_start":565,"line_end":565,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89947,"byte_end":89956,"line_start":646,"line_end":646,"column_start":12,"column_end":21},"name":"total_cmp","qualname":"<f16>::total_cmp","value":"fn total_cmp(&Self, &Self) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Returns the ordering between `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the ordering between `self` and `other`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87543,"byte_end":87595,"line_start":578,"line_end":578,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87600,"byte_end":87603,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ Unlike the standard partial comparison between floating point numbers,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87608,"byte_end":87682,"line_start":580,"line_end":580,"column_start":5,"column_end":79}},{"value":"/ this comparison always produces an ordering in accordance to","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87687,"byte_end":87751,"line_start":581,"line_end":581,"column_start":5,"column_end":69}},{"value":"/ the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87756,"byte_end":87829,"line_start":582,"line_end":582,"column_start":5,"column_end":78}},{"value":"/ floating point standard. The values are ordered in the following sequence:","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87834,"byte_end":87912,"line_start":583,"line_end":583,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87917,"byte_end":87920,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ - negative quiet NaN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87925,"byte_end":87949,"line_start":585,"line_end":585,"column_start":5,"column_end":29}},{"value":"/ - negative signaling NaN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87954,"byte_end":87982,"line_start":586,"line_end":586,"column_start":5,"column_end":33}},{"value":"/ - negative infinity","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":87987,"byte_end":88010,"line_start":587,"line_end":587,"column_start":5,"column_end":28}},{"value":"/ - negative numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88015,"byte_end":88037,"line_start":588,"line_end":588,"column_start":5,"column_end":27}},{"value":"/ - negative subnormal numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88042,"byte_end":88074,"line_start":589,"line_end":589,"column_start":5,"column_end":37}},{"value":"/ - negative zero","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88079,"byte_end":88098,"line_start":590,"line_end":590,"column_start":5,"column_end":24}},{"value":"/ - positive zero","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88103,"byte_end":88122,"line_start":591,"line_end":591,"column_start":5,"column_end":24}},{"value":"/ - positive subnormal numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88127,"byte_end":88159,"line_start":592,"line_end":592,"column_start":5,"column_end":37}},{"value":"/ - positive numbers","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88164,"byte_end":88186,"line_start":593,"line_end":593,"column_start":5,"column_end":27}},{"value":"/ - positive infinity","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88191,"byte_end":88214,"line_start":594,"line_end":594,"column_start":5,"column_end":28}},{"value":"/ - positive signaling NaN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88219,"byte_end":88247,"line_start":595,"line_end":595,"column_start":5,"column_end":33}},{"value":"/ - positive quiet NaN.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88252,"byte_end":88277,"line_start":596,"line_end":596,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88282,"byte_end":88285,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ The ordering established by this function does not always agree with the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88290,"byte_end":88366,"line_start":598,"line_end":598,"column_start":5,"column_end":81}},{"value":"/ [`PartialOrd`] and [`PartialEq`] implementations of `f16`. For example,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88371,"byte_end":88446,"line_start":599,"line_end":599,"column_start":5,"column_end":80}},{"value":"/ they consider negative and positive zero equal, while `total_cmp`","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88451,"byte_end":88520,"line_start":600,"line_end":600,"column_start":5,"column_end":74}},{"value":"/ doesn't.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88525,"byte_end":88537,"line_start":601,"line_end":601,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88542,"byte_end":88545,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ The interpretation of the signaling NaN bit follows the definition in","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88550,"byte_end":88623,"line_start":603,"line_end":603,"column_start":5,"column_end":78}},{"value":"/ the IEEE 754 standard, which may not match the interpretation by some of","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88628,"byte_end":88704,"line_start":604,"line_end":604,"column_start":5,"column_end":81}},{"value":"/ the older, non-conformant (e.g. MIPS) hardware implementations.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88709,"byte_end":88776,"line_start":605,"line_end":605,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88781,"byte_end":88784,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88789,"byte_end":88803,"line_start":607,"line_end":607,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88808,"byte_end":88815,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"/ # use half::f16;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88820,"byte_end":88840,"line_start":609,"line_end":609,"column_start":5,"column_end":25}},{"value":"/ let mut v: Vec<f16> = vec![];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88845,"byte_end":88878,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ v.push(f16::ONE);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88883,"byte_end":88904,"line_start":611,"line_end":611,"column_start":5,"column_end":26}},{"value":"/ v.push(f16::INFINITY);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88909,"byte_end":88935,"line_start":612,"line_end":612,"column_start":5,"column_end":31}},{"value":"/ v.push(f16::NEG_INFINITY);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88940,"byte_end":88970,"line_start":613,"line_end":613,"column_start":5,"column_end":35}},{"value":"/ v.push(f16::NAN);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":88975,"byte_end":88996,"line_start":614,"line_end":614,"column_start":5,"column_end":26}},{"value":"/ v.push(f16::MAX_SUBNORMAL);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89001,"byte_end":89032,"line_start":615,"line_end":615,"column_start":5,"column_end":36}},{"value":"/ v.push(-f16::MAX_SUBNORMAL);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89037,"byte_end":89069,"line_start":616,"line_end":616,"column_start":5,"column_end":37}},{"value":"/ v.push(f16::ZERO);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89074,"byte_end":89096,"line_start":617,"line_end":617,"column_start":5,"column_end":27}},{"value":"/ v.push(f16::NEG_ZERO);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89101,"byte_end":89127,"line_start":618,"line_end":618,"column_start":5,"column_end":31}},{"value":"/ v.push(f16::NEG_ONE);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89132,"byte_end":89157,"line_start":619,"line_end":619,"column_start":5,"column_end":30}},{"value":"/ v.push(f16::MIN_POSITIVE);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89162,"byte_end":89192,"line_start":620,"line_end":620,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89197,"byte_end":89200,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ v.sort_by(|a, b| a.total_cmp(&b));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89205,"byte_end":89243,"line_start":622,"line_end":622,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89248,"byte_end":89251,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ assert!(v","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89256,"byte_end":89269,"line_start":624,"line_end":624,"column_start":5,"column_end":18}},{"value":"/     .into_iter()","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89274,"byte_end":89294,"line_start":625,"line_end":625,"column_start":5,"column_end":25}},{"value":"/     .zip(","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89299,"byte_end":89312,"line_start":626,"line_end":626,"column_start":5,"column_end":18}},{"value":"/         [","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89317,"byte_end":89330,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/             f16::NEG_INFINITY,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89335,"byte_end":89369,"line_start":628,"line_end":628,"column_start":5,"column_end":39}},{"value":"/             f16::NEG_ONE,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89374,"byte_end":89403,"line_start":629,"line_end":629,"column_start":5,"column_end":34}},{"value":"/             -f16::MAX_SUBNORMAL,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89408,"byte_end":89444,"line_start":630,"line_end":630,"column_start":5,"column_end":41}},{"value":"/             f16::NEG_ZERO,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89449,"byte_end":89479,"line_start":631,"line_end":631,"column_start":5,"column_end":35}},{"value":"/             f16::ZERO,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89484,"byte_end":89510,"line_start":632,"line_end":632,"column_start":5,"column_end":31}},{"value":"/             f16::MAX_SUBNORMAL,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89515,"byte_end":89550,"line_start":633,"line_end":633,"column_start":5,"column_end":40}},{"value":"/             f16::MIN_POSITIVE,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89555,"byte_end":89589,"line_start":634,"line_end":634,"column_start":5,"column_end":39}},{"value":"/             f16::ONE,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89594,"byte_end":89619,"line_start":635,"line_end":635,"column_start":5,"column_end":30}},{"value":"/             f16::INFINITY,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89624,"byte_end":89654,"line_start":636,"line_end":636,"column_start":5,"column_end":35}},{"value":"/             f16::NAN","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89659,"byte_end":89683,"line_start":637,"line_end":637,"column_start":5,"column_end":29}},{"value":"/         ]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89688,"byte_end":89701,"line_start":638,"line_end":638,"column_start":5,"column_end":18}},{"value":"/         .iter()","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89706,"byte_end":89725,"line_start":639,"line_end":639,"column_start":5,"column_end":24}},{"value":"/     )","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89730,"byte_end":89739,"line_start":640,"line_end":640,"column_start":5,"column_end":14}},{"value":"/     .all(|(a, b)| a.to_bits() == b.to_bits()));","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89744,"byte_end":89795,"line_start":641,"line_end":641,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89800,"byte_end":89807,"line_start":642,"line_end":642,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89910,"byte_end":89919,"line_start":644,"line_end":644,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":89924,"byte_end":89935,"line_start":645,"line_end":645,"column_start":5,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":458},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90308,"byte_end":90314,"line_start":655,"line_end":655,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::f16::DIGITS","value":"u32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Approximate number of [`f16`] significant digits in base 10\n","sig":null,"attributes":[{"value":"/ Approximate number of [`f16`] significant digits in base 10","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90230,"byte_end":90293,"line_start":654,"line_end":654,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90528,"byte_end":90535,"line_start":660,"line_end":660,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::f16::EPSILON","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`]\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","sig":null,"attributes":[{"value":"/ [`f16`]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90329,"byte_end":90340,"line_start":656,"line_end":656,"column_start":5,"column_end":16}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90345,"byte_end":90419,"line_start":657,"line_end":657,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90424,"byte_end":90427,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90432,"byte_end":90513,"line_start":659,"line_end":659,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":460},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90614,"byte_end":90622,"line_start":662,"line_end":662,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::f16::INFINITY","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] positive Infinity (+∞)\n","sig":null,"attributes":[{"value":"/ [`f16`] positive Infinity (+∞)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90563,"byte_end":90599,"line_start":661,"line_end":661,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":461},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90715,"byte_end":90730,"line_start":664,"line_end":664,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::f16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Number of [`f16`] significant digits in base 2\n","sig":null,"attributes":[{"value":"/ Number of [`f16`] significant digits in base 2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90650,"byte_end":90700,"line_start":663,"line_end":663,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":462},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90793,"byte_end":90796,"line_start":666,"line_end":666,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::f16::MAX","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Largest finite [`f16`] value\n","sig":null,"attributes":[{"value":"/ Largest finite [`f16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90746,"byte_end":90778,"line_start":665,"line_end":665,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":463},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90885,"byte_end":90895,"line_start":668,"line_end":668,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::f16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`] power of 10 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90821,"byte_end":90870,"line_start":667,"line_end":667,"column_start":5,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":464},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90973,"byte_end":90980,"line_start":670,"line_end":670,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::f16::MAX_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`] power of 2 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90910,"byte_end":90958,"line_start":669,"line_end":669,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":465},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91044,"byte_end":91047,"line_start":672,"line_end":672,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::f16::MIN","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Smallest finite [`f16`] value\n","sig":null,"attributes":[{"value":"/ Smallest finite [`f16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":90996,"byte_end":91029,"line_start":671,"line_end":671,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":466},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91143,"byte_end":91153,"line_start":674,"line_end":674,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::f16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Minimum possible normal [`f16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`f16`] power of 10 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91072,"byte_end":91128,"line_start":673,"line_end":673,"column_start":5,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":467},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91260,"byte_end":91267,"line_start":676,"line_end":676,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::f16::MIN_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`f16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`f16`] power of 2 exponent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91169,"byte_end":91245,"line_start":675,"line_end":675,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":468},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91341,"byte_end":91353,"line_start":678,"line_end":678,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::f16::MIN_POSITIVE","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Smallest positive normal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`f16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91284,"byte_end":91326,"line_start":677,"line_end":677,"column_start":5,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":469},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91426,"byte_end":91429,"line_start":680,"line_end":680,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::f16::NAN","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] Not a Number (NaN)\n","sig":null,"attributes":[{"value":"/ [`f16`] Not a Number (NaN)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91381,"byte_end":91411,"line_start":679,"line_end":679,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":470},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91508,"byte_end":91520,"line_start":682,"line_end":682,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::f16::NEG_INFINITY","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] negative infinity (-∞)\n","sig":null,"attributes":[{"value":"/ [`f16`] negative infinity (-∞)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91457,"byte_end":91493,"line_start":681,"line_end":681,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":471},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91626,"byte_end":91631,"line_start":684,"line_end":684,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::f16::RADIX","value":"u32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`f16`]\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`f16`]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91548,"byte_end":91611,"line_start":683,"line_end":683,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":472},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91706,"byte_end":91728,"line_start":687,"line_end":687,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::f16::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`f16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91647,"byte_end":91691,"line_start":686,"line_end":686,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":473},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91806,"byte_end":91819,"line_start":689,"line_end":689,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::f16::MAX_SUBNORMAL","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Maximum subnormal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`f16`] value","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91756,"byte_end":91791,"line_start":688,"line_end":688,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":474},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91876,"byte_end":91879,"line_start":692,"line_end":692,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::f16::ONE","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 1\n","sig":null,"attributes":[{"value":"/ [`f16`] 1","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91848,"byte_end":91861,"line_start":691,"line_end":691,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":475},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91935,"byte_end":91939,"line_start":694,"line_end":694,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::f16::ZERO","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 0\n","sig":null,"attributes":[{"value":"/ [`f16`] 0","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91907,"byte_end":91920,"line_start":693,"line_end":693,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":476},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91996,"byte_end":92004,"line_start":696,"line_end":696,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::f16::NEG_ZERO","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] -0\n","sig":null,"attributes":[{"value":"/ [`f16`] -0","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":91967,"byte_end":91981,"line_start":695,"line_end":695,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":477},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92061,"byte_end":92068,"line_start":698,"line_end":698,"column_start":15,"column_end":22},"name":"NEG_ONE","qualname":"::binary16::f16::NEG_ONE","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] -1\n","sig":null,"attributes":[{"value":"/ [`f16`] -1","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92032,"byte_end":92046,"line_start":697,"line_end":697,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":478},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92144,"byte_end":92145,"line_start":701,"line_end":701,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::f16::E","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] Euler's number (ℯ)\n","sig":null,"attributes":[{"value":"/ [`f16`] Euler's number (ℯ)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92097,"byte_end":92129,"line_start":700,"line_end":700,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":479},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92225,"byte_end":92227,"line_start":703,"line_end":703,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::f16::PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ [`f16`] Archimedes' constant (π)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92173,"byte_end":92210,"line_start":702,"line_end":702,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":480},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92286,"byte_end":92295,"line_start":705,"line_end":705,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::f16::FRAC_1_PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 1/π\n","sig":null,"attributes":[{"value":"/ [`f16`] 1/π","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92255,"byte_end":92271,"line_start":704,"line_end":704,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":481},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92356,"byte_end":92369,"line_start":707,"line_end":707,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::f16::FRAC_1_SQRT_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 1/√2\n","sig":null,"attributes":[{"value":"/ [`f16`] 1/√2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92323,"byte_end":92341,"line_start":706,"line_end":706,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":482},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92428,"byte_end":92437,"line_start":709,"line_end":709,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::f16::FRAC_2_PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 2/π\n","sig":null,"attributes":[{"value":"/ [`f16`] 2/π","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92397,"byte_end":92413,"line_start":708,"line_end":708,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":483},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92499,"byte_end":92513,"line_start":711,"line_end":711,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::f16::FRAC_2_SQRT_PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 2/√π\n","sig":null,"attributes":[{"value":"/ [`f16`] 2/√π","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92465,"byte_end":92484,"line_start":710,"line_end":710,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":484},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92572,"byte_end":92581,"line_start":713,"line_end":713,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::f16::FRAC_PI_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/2\n","sig":null,"attributes":[{"value":"/ [`f16`] π/2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92541,"byte_end":92557,"line_start":712,"line_end":712,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":485},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92640,"byte_end":92649,"line_start":715,"line_end":715,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::f16::FRAC_PI_3","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/3\n","sig":null,"attributes":[{"value":"/ [`f16`] π/3","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92609,"byte_end":92625,"line_start":714,"line_end":714,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":486},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92708,"byte_end":92717,"line_start":717,"line_end":717,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::f16::FRAC_PI_4","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/4\n","sig":null,"attributes":[{"value":"/ [`f16`] π/4","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92677,"byte_end":92693,"line_start":716,"line_end":716,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":487},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92776,"byte_end":92785,"line_start":719,"line_end":719,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::f16::FRAC_PI_6","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/6\n","sig":null,"attributes":[{"value":"/ [`f16`] π/6","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92745,"byte_end":92761,"line_start":718,"line_end":718,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":488},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92844,"byte_end":92853,"line_start":721,"line_end":721,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::f16::FRAC_PI_8","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/8\n","sig":null,"attributes":[{"value":"/ [`f16`] π/8","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92813,"byte_end":92829,"line_start":720,"line_end":720,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":489},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92919,"byte_end":92924,"line_start":723,"line_end":723,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::f16::LN_10","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗇 10","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92881,"byte_end":92904,"line_start":722,"line_end":722,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":490},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92989,"byte_end":92993,"line_start":725,"line_end":725,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::f16::LN_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗇 2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":92952,"byte_end":92974,"line_start":724,"line_end":724,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":491},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93069,"byte_end":93076,"line_start":727,"line_end":727,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::f16::LOG10_E","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93021,"byte_end":93054,"line_start":726,"line_end":726,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":492},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93150,"byte_end":93157,"line_start":729,"line_end":729,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::binary16::f16::LOG10_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₁₀2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93104,"byte_end":93135,"line_start":728,"line_end":728,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":493},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93230,"byte_end":93236,"line_start":731,"line_end":731,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::f16::LOG2_E","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93185,"byte_end":93215,"line_start":730,"line_end":730,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":494},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93308,"byte_end":93315,"line_start":733,"line_end":733,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::binary16::f16::LOG2_10","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₂10","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93264,"byte_end":93293,"line_start":732,"line_end":732,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":495},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93374,"byte_end":93380,"line_start":735,"line_end":735,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::f16::SQRT_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] √2\n","sig":null,"attributes":[{"value":"/ [`f16`] √2","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93343,"byte_end":93359,"line_start":734,"line_end":734,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93453,"byte_end":93457,"line_start":740,"line_end":740,"column_start":8,"column_end":12},"name":"from","qualname":"<f32 as std::convert::From>::from","value":"fn from(f16) -> f32","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93436,"byte_end":93445,"line_start":739,"line_end":739,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93549,"byte_end":93553,"line_start":747,"line_end":747,"column_start":8,"column_end":12},"name":"from","qualname":"<f64 as std::convert::From>::from","value":"fn from(f16) -> f64","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93532,"byte_end":93541,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93644,"byte_end":93648,"line_start":754,"line_end":754,"column_start":8,"column_end":12},"name":"from","qualname":"<f16 as std::convert::From>::from","value":"fn from(i8) -> f16","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93627,"byte_end":93636,"line_start":753,"line_end":753,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93794,"byte_end":93798,"line_start":762,"line_end":762,"column_start":8,"column_end":12},"name":"from","qualname":"<f16 as std::convert::From>::from","value":"fn from(u8) -> f16","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93777,"byte_end":93786,"line_start":761,"line_end":761,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93931,"byte_end":93933,"line_start":769,"line_end":769,"column_start":8,"column_end":10},"name":"eq","qualname":"<f16 as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &f16) -> bool","parent":{"krate":2,"index":2831},"children":[],"decl_id":{"krate":2,"index":2833},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":94169,"byte_end":94180,"line_start":779,"line_end":779,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<f16 as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp(&Self, &f16) -> Option<Ordering>","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2879},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":95115,"byte_end":95117,"line_start":806,"line_end":806,"column_start":8,"column_end":10},"name":"lt","qualname":"<f16 as std::cmp::PartialOrd>::lt","value":"fn lt(&Self, &f16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2880},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":95616,"byte_end":95618,"line_start":821,"line_end":821,"column_start":8,"column_end":10},"name":"le","qualname":"<f16 as std::cmp::PartialOrd>::le","value":"fn le(&Self, &f16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2881},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":96118,"byte_end":96120,"line_start":836,"line_end":836,"column_start":8,"column_end":10},"name":"gt","qualname":"<f16 as std::cmp::PartialOrd>::gt","value":"fn gt(&Self, &f16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2882},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":96619,"byte_end":96621,"line_start":851,"line_end":851,"column_start":8,"column_end":10},"name":"ge","qualname":"<f16 as std::cmp::PartialOrd>::ge","value":"fn ge(&Self, &f16) -> bool","parent":{"krate":2,"index":2877},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97213,"byte_end":97221,"line_start":870,"line_end":870,"column_start":8,"column_end":16},"name":"from_str","qualname":"<f16 as std::str::FromStr>::from_str","value":"fn from_str(&str) -> Result<f16, ParseFloatError>","parent":{"krate":2,"index":12765},"children":[],"decl_id":{"krate":2,"index":12767},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97385,"byte_end":97388,"line_start":877,"line_end":877,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10108},"children":[],"decl_id":{"krate":2,"index":10109},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97557,"byte_end":97560,"line_start":884,"line_end":884,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10115},"children":[],"decl_id":{"krate":2,"index":10116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97728,"byte_end":97731,"line_start":891,"line_end":891,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10127},"children":[],"decl_id":{"krate":2,"index":10128},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97901,"byte_end":97904,"line_start":898,"line_end":898,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10129},"children":[],"decl_id":{"krate":2,"index":10130},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98072,"byte_end":98075,"line_start":905,"line_end":905,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10119},"children":[],"decl_id":{"krate":2,"index":10120},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98235,"byte_end":98238,"line_start":912,"line_end":912,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98401,"byte_end":98404,"line_start":919,"line_end":919,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10121},"children":[],"decl_id":{"krate":2,"index":10122},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98567,"byte_end":98570,"line_start":926,"line_end":926,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10123},"children":[],"decl_id":{"krate":2,"index":10124},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98732,"byte_end":98735,"line_start":935,"line_end":935,"column_start":8,"column_end":11},"name":"neg","qualname":"<f16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3274},"children":[],"decl_id":{"krate":2,"index":3276},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98715,"byte_end":98724,"line_start":934,"line_end":934,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98881,"byte_end":98884,"line_start":944,"line_end":944,"column_start":8,"column_end":11},"name":"neg","qualname":"<&'_ f16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3274},"children":[],"decl_id":{"krate":2,"index":3276},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98864,"byte_end":98873,"line_start":943,"line_end":943,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99007,"byte_end":99010,"line_start":953,"line_end":953,"column_start":8,"column_end":11},"name":"add","qualname":"<f16 as std::ops::Add>::add","value":"fn add(Self, Self) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98990,"byte_end":98999,"line_start":952,"line_end":952,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99210,"byte_end":99213,"line_start":962,"line_end":962,"column_start":8,"column_end":11},"name":"add","qualname":"<f16 as std::ops::Add>::add","value":"fn add(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99193,"byte_end":99202,"line_start":961,"line_end":961,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99374,"byte_end":99377,"line_start":971,"line_end":971,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ f16 as std::ops::Add>::add","value":"fn add(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99357,"byte_end":99366,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99540,"byte_end":99543,"line_start":980,"line_end":980,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ f16 as std::ops::Add>::add","value":"fn add(Self, f16) -> Self::Output","parent":{"krate":2,"index":3247},"children":[],"decl_id":{"krate":2,"index":3250},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99523,"byte_end":99532,"line_start":979,"line_end":979,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99658,"byte_end":99668,"line_start":987,"line_end":987,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<f16 as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Self)","parent":{"krate":2,"index":3278},"children":[],"decl_id":{"krate":2,"index":3280},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99641,"byte_end":99650,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99788,"byte_end":99798,"line_start":994,"line_end":994,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<f16 as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, &f16)","parent":{"krate":2,"index":3278},"children":[],"decl_id":{"krate":2,"index":3280},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99771,"byte_end":99780,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99931,"byte_end":99934,"line_start":1003,"line_end":1003,"column_start":8,"column_end":11},"name":"sub","qualname":"<f16 as std::ops::Sub>::sub","value":"fn sub(Self, Self) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99914,"byte_end":99923,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100134,"byte_end":100137,"line_start":1012,"line_end":1012,"column_start":8,"column_end":11},"name":"sub","qualname":"<f16 as std::ops::Sub>::sub","value":"fn sub(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100117,"byte_end":100126,"line_start":1011,"line_end":1011,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100298,"byte_end":100301,"line_start":1021,"line_end":1021,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ f16 as std::ops::Sub>::sub","value":"fn sub(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100281,"byte_end":100290,"line_start":1020,"line_end":1020,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100464,"byte_end":100467,"line_start":1030,"line_end":1030,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ f16 as std::ops::Sub>::sub","value":"fn sub(Self, f16) -> Self::Output","parent":{"krate":2,"index":3252},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100447,"byte_end":100456,"line_start":1029,"line_end":1029,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100582,"byte_end":100592,"line_start":1037,"line_end":1037,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<f16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Self)","parent":{"krate":2,"index":3282},"children":[],"decl_id":{"krate":2,"index":3284},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100565,"byte_end":100574,"line_start":1036,"line_end":1036,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100712,"byte_end":100722,"line_start":1044,"line_end":1044,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<f16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, &f16)","parent":{"krate":2,"index":3282},"children":[],"decl_id":{"krate":2,"index":3284},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100695,"byte_end":100704,"line_start":1043,"line_end":1043,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100855,"byte_end":100858,"line_start":1053,"line_end":1053,"column_start":8,"column_end":11},"name":"mul","qualname":"<f16 as std::ops::Mul>::mul","value":"fn mul(Self, Self) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100838,"byte_end":100847,"line_start":1052,"line_end":1052,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101058,"byte_end":101061,"line_start":1062,"line_end":1062,"column_start":8,"column_end":11},"name":"mul","qualname":"<f16 as std::ops::Mul>::mul","value":"fn mul(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101041,"byte_end":101050,"line_start":1061,"line_end":1061,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101222,"byte_end":101225,"line_start":1071,"line_end":1071,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ f16 as std::ops::Mul>::mul","value":"fn mul(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101205,"byte_end":101214,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101388,"byte_end":101391,"line_start":1080,"line_end":1080,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ f16 as std::ops::Mul>::mul","value":"fn mul(Self, f16) -> Self::Output","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3260},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101371,"byte_end":101380,"line_start":1079,"line_end":1079,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101506,"byte_end":101516,"line_start":1087,"line_end":1087,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<f16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Self)","parent":{"krate":2,"index":3286},"children":[],"decl_id":{"krate":2,"index":3288},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101489,"byte_end":101498,"line_start":1086,"line_end":1086,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101636,"byte_end":101646,"line_start":1094,"line_end":1094,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<f16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, &f16)","parent":{"krate":2,"index":3286},"children":[],"decl_id":{"krate":2,"index":3288},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101619,"byte_end":101628,"line_start":1093,"line_end":1093,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101779,"byte_end":101782,"line_start":1103,"line_end":1103,"column_start":8,"column_end":11},"name":"div","qualname":"<f16 as std::ops::Div>::div","value":"fn div(Self, Self) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101762,"byte_end":101771,"line_start":1102,"line_end":1102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101982,"byte_end":101985,"line_start":1112,"line_end":1112,"column_start":8,"column_end":11},"name":"div","qualname":"<f16 as std::ops::Div>::div","value":"fn div(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101965,"byte_end":101974,"line_start":1111,"line_end":1111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102146,"byte_end":102149,"line_start":1121,"line_end":1121,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ f16 as std::ops::Div>::div","value":"fn div(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102129,"byte_end":102138,"line_start":1120,"line_end":1120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102312,"byte_end":102315,"line_start":1130,"line_end":1130,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ f16 as std::ops::Div>::div","value":"fn div(Self, f16) -> Self::Output","parent":{"krate":2,"index":3262},"children":[],"decl_id":{"krate":2,"index":3265},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102295,"byte_end":102304,"line_start":1129,"line_end":1129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102430,"byte_end":102440,"line_start":1137,"line_end":1137,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<f16 as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Self)","parent":{"krate":2,"index":3290},"children":[],"decl_id":{"krate":2,"index":3292},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102413,"byte_end":102422,"line_start":1136,"line_end":1136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102560,"byte_end":102570,"line_start":1144,"line_end":1144,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<f16 as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, &f16)","parent":{"krate":2,"index":3290},"children":[],"decl_id":{"krate":2,"index":3292},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102543,"byte_end":102552,"line_start":1143,"line_end":1143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102703,"byte_end":102706,"line_start":1153,"line_end":1153,"column_start":8,"column_end":11},"name":"rem","qualname":"<f16 as std::ops::Rem>::rem","value":"fn rem(Self, Self) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102686,"byte_end":102695,"line_start":1152,"line_end":1152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102906,"byte_end":102909,"line_start":1162,"line_end":1162,"column_start":8,"column_end":11},"name":"rem","qualname":"<f16 as std::ops::Rem>::rem","value":"fn rem(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102889,"byte_end":102898,"line_start":1161,"line_end":1161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103070,"byte_end":103073,"line_start":1171,"line_end":1171,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ f16 as std::ops::Rem>::rem","value":"fn rem(Self, &f16) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103053,"byte_end":103062,"line_start":1170,"line_end":1170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103236,"byte_end":103239,"line_start":1180,"line_end":1180,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ f16 as std::ops::Rem>::rem","value":"fn rem(Self, f16) -> Self::Output","parent":{"krate":2,"index":3268},"children":[],"decl_id":{"krate":2,"index":3271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103219,"byte_end":103228,"line_start":1179,"line_end":1179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103354,"byte_end":103364,"line_start":1187,"line_end":1187,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<f16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, Self)","parent":{"krate":2,"index":3294},"children":[],"decl_id":{"krate":2,"index":3296},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103337,"byte_end":103346,"line_start":1186,"line_end":1186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103484,"byte_end":103494,"line_start":1194,"line_end":1194,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<f16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, &f16)","parent":{"krate":2,"index":3294},"children":[],"decl_id":{"krate":2,"index":3296},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103467,"byte_end":103476,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103606,"byte_end":103613,"line_start":1201,"line_end":1201,"column_start":8,"column_end":15},"name":"product","qualname":"<f16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8242},"children":[],"decl_id":{"krate":2,"index":8244},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103589,"byte_end":103598,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103783,"byte_end":103790,"line_start":1208,"line_end":1208,"column_start":8,"column_end":15},"name":"product","qualname":"<f16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = &'a f16>","parent":{"krate":2,"index":8242},"children":[],"decl_id":{"krate":2,"index":8244},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103766,"byte_end":103775,"line_start":1207,"line_end":1207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103946,"byte_end":103949,"line_start":1215,"line_end":1215,"column_start":8,"column_end":11},"name":"sum","qualname":"<f16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8238},"children":[],"decl_id":{"krate":2,"index":8240},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103929,"byte_end":103938,"line_start":1214,"line_end":1214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":104111,"byte_end":104114,"line_start":1222,"line_end":1222,"column_start":8,"column_end":11},"name":"sum","qualname":"<f16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = &'a f16>","parent":{"krate":2,"index":8238},"children":[],"decl_id":{"krate":2,"index":8240},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":104094,"byte_end":104103,"line_start":1221,"line_end":1221,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":637},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":663},{"krate":0,"index":668},{"krate":0,"index":681},{"krate":0,"index":694},{"krate":0,"index":703}],"decl_id":null,"docs":" Contains utility functions and traits to convert between slices of [`u16`] bits and [`f16`] or\n [`bf16`] numbers.","sig":null,"attributes":[{"value":"cfg(not(target_arch = \"spirv\"))","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7644,"byte_end":7678,"line_start":179,"line_end":179,"column_start":1,"column_end":35}},{"value":"/ Contains utility functions and traits to convert between slices of [`u16`] bits and [`f16`] or","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145193,"byte_end":145291,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"/ [`bf16`] numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145292,"byte_end":145313,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145314,"byte_end":145317,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The utility [`HalfBitsSliceExt`] sealed extension trait is implemented for `[u16]` slices,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145318,"byte_end":145412,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ while the utility [`HalfFloatSliceExt`] sealed extension trait is implemented for both `[f16]`","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145413,"byte_end":145511,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ and `[bf16]` slices. These traits provide efficient conversions and reinterpret casting of","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145512,"byte_end":145606,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ larger buffers of floating point values, and are automatically included in the","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145607,"byte_end":145689,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ [`prelude`][crate::prelude] module.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145690,"byte_end":145729,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":654},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146023,"byte_end":146040,"line_start":18,"line_end":18,"column_start":11,"column_end":28},"name":"HalfFloatSliceExt","qualname":"::slice::HalfFloatSliceExt","value":"HalfFloatSliceExt: private::SealedHalfFloatSlice","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662}],"decl_id":null,"docs":" Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145839,"byte_end":145934,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145935,"byte_end":145938,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":145939,"byte_end":146012,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146679,"byte_end":146695,"line_start":34,"line_end":34,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast","value":"fn reinterpret_cast(&Self) -> &[u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Reinterprets a slice of [`f16`] or [`bf16`] numbers as a slice of [`u16`] bits.","sig":null,"attributes":[{"value":"/ Reinterprets a slice of [`f16`] or [`bf16`] numbers as a slice of [`u16`] bits.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146078,"byte_end":146161,"line_start":19,"line_end":19,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146166,"byte_end":146169,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146174,"byte_end":146265,"line_start":21,"line_end":21,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146270,"byte_end":146293,"line_start":22,"line_end":22,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146298,"byte_end":146301,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146306,"byte_end":146320,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146325,"byte_end":146328,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146333,"byte_end":146344,"line_start":26,"line_end":26,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146349,"byte_end":146376,"line_start":27,"line_end":27,"column_start":5,"column_end":32}},{"value":"/ let float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146381,"byte_end":146462,"line_start":28,"line_end":28,"column_start":5,"column_end":86}},{"value":"/ let int_buffer = float_buffer.reinterpret_cast();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146467,"byte_end":146520,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146525,"byte_end":146528,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(int_buffer, [float_buffer[0].to_bits(), float_buffer[1].to_bits(), float_buffer[2].to_bits()]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146533,"byte_end":146643,"line_start":31,"line_end":31,"column_start":5,"column_end":115}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146648,"byte_end":146655,"line_start":32,"line_end":32,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146660,"byte_end":146671,"line_start":33,"line_end":33,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147774,"byte_end":147794,"line_start":61,"line_end":61,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast_mut","value":"fn reinterpret_cast_mut(&mut Self) -> &mut [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Reinterprets a mutable slice of [`f16`] or [`bf16`] numbers as a mutable slice of [`u16`].\n bits","sig":null,"attributes":[{"value":"/ Reinterprets a mutable slice of [`f16`] or [`bf16`] numbers as a mutable slice of [`u16`].","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146719,"byte_end":146813,"line_start":36,"line_end":36,"column_start":5,"column_end":99}},{"value":"/ bits","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146818,"byte_end":146826,"line_start":37,"line_end":37,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146831,"byte_end":146834,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146839,"byte_end":146933,"line_start":39,"line_end":39,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [u16]` is borrowed.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146938,"byte_end":147022,"line_start":40,"line_end":40,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147027,"byte_end":147030,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147035,"byte_end":147049,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147054,"byte_end":147057,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147062,"byte_end":147073,"line_start":44,"line_end":44,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147078,"byte_end":147105,"line_start":45,"line_end":45,"column_start":5,"column_end":32}},{"value":"/ let mut float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147110,"byte_end":147195,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147200,"byte_end":147203,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147208,"byte_end":147213,"line_start":48,"line_end":48,"column_start":5,"column_end":10}},{"value":"/     let int_buffer = float_buffer.reinterpret_cast_mut();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147218,"byte_end":147279,"line_start":49,"line_end":49,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147284,"byte_end":147287,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(int_buffer, [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147292,"byte_end":147412,"line_start":51,"line_end":51,"column_start":5,"column_end":125}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147417,"byte_end":147420,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/     // Mutating the u16 slice will mutating the original","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147425,"byte_end":147485,"line_start":53,"line_end":53,"column_start":5,"column_end":65}},{"value":"/     int_buffer[0] = 0;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147490,"byte_end":147516,"line_start":54,"line_end":54,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147521,"byte_end":147526,"line_start":55,"line_end":55,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147531,"byte_end":147534,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop int_buffer before using float_buffer again or we will get a borrow error.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147539,"byte_end":147645,"line_start":57,"line_end":57,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(0.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147650,"byte_end":147738,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147743,"byte_end":147750,"line_start":59,"line_end":59,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147755,"byte_end":147766,"line_start":60,"line_end":60,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148883,"byte_end":148905,"line_start":90,"line_end":90,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f32_slice","value":"fn convert_from_f32_slice(&mut Self, &[f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f32]` slice into [`f16`] or [`bf16`] values in `self`.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f32]` slice into [`f16`] or [`bf16`] values in `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147826,"byte_end":147920,"line_start":63,"line_end":63,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147925,"byte_end":147928,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147933,"byte_end":147984,"line_start":65,"line_end":65,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147989,"byte_end":147992,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":147997,"byte_end":148090,"line_start":67,"line_end":67,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148095,"byte_end":148180,"line_start":68,"line_end":68,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148185,"byte_end":148278,"line_start":69,"line_end":69,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148283,"byte_end":148295,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148300,"byte_end":148303,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148308,"byte_end":148320,"line_start":72,"line_end":72,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148325,"byte_end":148328,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148333,"byte_end":148403,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148408,"byte_end":148411,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148416,"byte_end":148430,"line_start":76,"line_end":76,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148435,"byte_end":148446,"line_start":77,"line_end":77,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148451,"byte_end":148478,"line_start":78,"line_end":78,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148483,"byte_end":148516,"line_start":79,"line_end":79,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148521,"byte_end":148552,"line_start":80,"line_end":80,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148557,"byte_end":148611,"line_start":81,"line_end":81,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148616,"byte_end":148619,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148624,"byte_end":148664,"line_start":83,"line_end":83,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148669,"byte_end":148672,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148677,"byte_end":148695,"line_start":85,"line_end":85,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f32_slice(&float_values);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148700,"byte_end":148749,"line_start":86,"line_end":86,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148754,"byte_end":148757,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148762,"byte_end":148863,"line_start":88,"line_end":88,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148868,"byte_end":148875,"line_start":89,"line_end":89,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149993,"byte_end":150015,"line_start":119,"line_end":119,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f64_slice","value":"fn convert_from_f64_slice(&mut Self, &[f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f64]` slice into [`f16`] or [`bf16`] values in `self`.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f64]` slice into [`f16`] or [`bf16`] values in `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":148936,"byte_end":149030,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149035,"byte_end":149038,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149043,"byte_end":149094,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149099,"byte_end":149102,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149107,"byte_end":149200,"line_start":96,"line_end":96,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149205,"byte_end":149290,"line_start":97,"line_end":97,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149295,"byte_end":149388,"line_start":98,"line_end":98,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149393,"byte_end":149405,"line_start":99,"line_end":99,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149410,"byte_end":149413,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149418,"byte_end":149430,"line_start":101,"line_end":101,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149435,"byte_end":149438,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149443,"byte_end":149513,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149518,"byte_end":149521,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149526,"byte_end":149540,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149545,"byte_end":149556,"line_start":106,"line_end":106,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149561,"byte_end":149588,"line_start":107,"line_end":107,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149593,"byte_end":149626,"line_start":108,"line_end":108,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149631,"byte_end":149662,"line_start":109,"line_end":109,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149667,"byte_end":149721,"line_start":110,"line_end":110,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149726,"byte_end":149729,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149734,"byte_end":149774,"line_start":112,"line_end":112,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149779,"byte_end":149782,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149787,"byte_end":149805,"line_start":114,"line_end":114,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f64_slice(&float_values);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149810,"byte_end":149859,"line_start":115,"line_end":115,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149864,"byte_end":149867,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149872,"byte_end":149973,"line_start":117,"line_end":117,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":149978,"byte_end":149985,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151042,"byte_end":151062,"line_start":147,"line_end":147,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f32_slice","value":"fn convert_to_f32_slice(&Self, &mut [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in `dst`.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in `dst`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150046,"byte_end":150138,"line_start":121,"line_end":121,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150143,"byte_end":150146,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150151,"byte_end":150202,"line_start":123,"line_end":123,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150207,"byte_end":150210,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150215,"byte_end":150308,"line_start":125,"line_end":125,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150313,"byte_end":150398,"line_start":126,"line_end":126,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150403,"byte_end":150496,"line_start":127,"line_end":127,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150501,"byte_end":150513,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150518,"byte_end":150521,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150526,"byte_end":150538,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150543,"byte_end":150546,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150551,"byte_end":150621,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150626,"byte_end":150629,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150634,"byte_end":150648,"line_start":134,"line_end":134,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150653,"byte_end":150664,"line_start":135,"line_end":135,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150669,"byte_end":150696,"line_start":136,"line_end":136,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150701,"byte_end":150734,"line_start":137,"line_end":137,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f32; 4];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150739,"byte_end":150770,"line_start":138,"line_end":138,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150775,"byte_end":150778,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150783,"byte_end":150882,"line_start":140,"line_end":140,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150887,"byte_end":150890,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150895,"byte_end":150913,"line_start":142,"line_end":142,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f32_slice(&mut buffer);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150918,"byte_end":150968,"line_start":143,"line_end":143,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150973,"byte_end":150976,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":150981,"byte_end":151022,"line_start":145,"line_end":145,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151027,"byte_end":151034,"line_start":146,"line_end":146,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152089,"byte_end":152109,"line_start":175,"line_end":175,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f64_slice","value":"fn convert_to_f64_slice(&Self, &mut [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in `dst`.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in `dst`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151093,"byte_end":151185,"line_start":149,"line_end":149,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151190,"byte_end":151193,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151198,"byte_end":151249,"line_start":151,"line_end":151,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151254,"byte_end":151257,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151262,"byte_end":151355,"line_start":153,"line_end":153,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151360,"byte_end":151445,"line_start":154,"line_end":154,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151450,"byte_end":151543,"line_start":155,"line_end":155,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151548,"byte_end":151560,"line_start":156,"line_end":156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151565,"byte_end":151568,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151573,"byte_end":151585,"line_start":158,"line_end":158,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151590,"byte_end":151593,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151598,"byte_end":151668,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151673,"byte_end":151676,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151681,"byte_end":151695,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151700,"byte_end":151711,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151716,"byte_end":151743,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151748,"byte_end":151781,"line_start":165,"line_end":165,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f64; 4];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151786,"byte_end":151817,"line_start":166,"line_end":166,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151822,"byte_end":151825,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151830,"byte_end":151929,"line_start":168,"line_end":168,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151934,"byte_end":151937,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151942,"byte_end":151960,"line_start":170,"line_end":170,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f64_slice(&mut buffer);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":151965,"byte_end":152015,"line_start":171,"line_end":171,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152020,"byte_end":152023,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152028,"byte_end":152069,"line_start":173,"line_end":173,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152074,"byte_end":152081,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153150,"byte_end":153160,"line_start":200,"line_end":200,"column_start":8,"column_end":18},"name":"to_f32_vec","qualname":"::slice::HalfFloatSliceExt::to_f32_vec","value":"fn to_f32_vec(&Self) -> Vec<f32>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in a new\n vector","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in a new","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152233,"byte_end":152324,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ vector","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152329,"byte_end":152339,"line_start":180,"line_end":180,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152344,"byte_end":152347,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152352,"byte_end":152445,"line_start":182,"line_end":182,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152450,"byte_end":152535,"line_start":183,"line_end":183,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152540,"byte_end":152633,"line_start":184,"line_end":184,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152638,"byte_end":152650,"line_start":185,"line_end":185,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152655,"byte_end":152658,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ This method is only available with the `std` or `alloc` feature.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152663,"byte_end":152731,"line_start":187,"line_end":187,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152736,"byte_end":152739,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152744,"byte_end":152758,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152763,"byte_end":152774,"line_start":190,"line_end":190,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152779,"byte_end":152806,"line_start":191,"line_end":191,"column_start":5,"column_end":32}},{"value":"/ let half_values = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152811,"byte_end":152910,"line_start":192,"line_end":192,"column_start":5,"column_end":104}},{"value":"/ let vec = half_values.to_f32_vec();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152915,"byte_end":152954,"line_start":193,"line_end":193,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152959,"byte_end":152962,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![1., 2., 3., 4.]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":152967,"byte_end":153009,"line_start":195,"line_end":195,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153014,"byte_end":153021,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153026,"byte_end":153073,"line_start":197,"line_end":197,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153131,"byte_end":153142,"line_start":199,"line_end":199,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154082,"byte_end":154092,"line_start":223,"line_end":223,"column_start":8,"column_end":18},"name":"to_f64_vec","qualname":"::slice::HalfFloatSliceExt::to_f64_vec","value":"fn to_f64_vec(&Self) -> Vec<f64>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in a new\n vector.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in a new","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153186,"byte_end":153277,"line_start":202,"line_end":202,"column_start":5,"column_end":96}},{"value":"/ vector.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153282,"byte_end":153293,"line_start":203,"line_end":203,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153298,"byte_end":153301,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153306,"byte_end":153399,"line_start":205,"line_end":205,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153404,"byte_end":153489,"line_start":206,"line_end":206,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153494,"byte_end":153587,"line_start":207,"line_end":207,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153592,"byte_end":153604,"line_start":208,"line_end":208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153609,"byte_end":153612,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This method is only available with the `std` or `alloc` feature.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153617,"byte_end":153685,"line_start":210,"line_end":210,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153690,"byte_end":153693,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153698,"byte_end":153712,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153717,"byte_end":153728,"line_start":213,"line_end":213,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153733,"byte_end":153760,"line_start":214,"line_end":214,"column_start":5,"column_end":32}},{"value":"/ let half_values = [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153765,"byte_end":153864,"line_start":215,"line_end":215,"column_start":5,"column_end":104}},{"value":"/ let vec = half_values.to_f64_vec();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153869,"byte_end":153908,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153913,"byte_end":153916,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![1., 2., 3., 4.]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153921,"byte_end":153963,"line_start":218,"line_end":218,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153968,"byte_end":153975,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":153980,"byte_end":154005,"line_start":220,"line_end":220,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154063,"byte_end":154074,"line_start":222,"line_end":222,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":663},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154272,"byte_end":154288,"line_start":229,"line_end":229,"column_start":11,"column_end":27},"name":"HalfBitsSliceExt","qualname":"::slice::HalfBitsSliceExt","value":"HalfBitsSliceExt: private::SealedHalfBitsSlice","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":666}],"decl_id":null,"docs":" Extensions to `[u16]` slices to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[u16]` slices to support reinterpret operations.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154116,"byte_end":154183,"line_start":226,"line_end":226,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154184,"byte_end":154187,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154188,"byte_end":154261,"line_start":228,"line_end":228,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155250,"byte_end":155266,"line_start":251,"line_end":251,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast","value":"fn reinterpret_cast<H>(&Self) -> &[H] where H: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Reinterprets a slice of [`u16`] bits as a slice of [`f16`] or [`bf16`] numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a slice of [`u16`] bits as a slice of [`f16`] or [`bf16`] numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154325,"byte_end":154408,"line_start":230,"line_end":230,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154413,"byte_end":154416,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154421,"byte_end":154501,"line_start":232,"line_end":232,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154506,"byte_end":154509,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154514,"byte_end":154605,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154610,"byte_end":154633,"line_start":235,"line_end":235,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154638,"byte_end":154641,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154646,"byte_end":154660,"line_start":237,"line_end":237,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154665,"byte_end":154668,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154673,"byte_end":154684,"line_start":239,"line_end":239,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154689,"byte_end":154716,"line_start":240,"line_end":240,"column_start":5,"column_end":32}},{"value":"/ let int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154721,"byte_end":154830,"line_start":241,"line_end":241,"column_start":5,"column_end":114}},{"value":"/ let float_buffer: &[f16] = int_buffer.reinterpret_cast();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154835,"byte_end":154896,"line_start":242,"line_end":242,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154901,"byte_end":154904,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154909,"byte_end":154997,"line_start":244,"line_end":244,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155002,"byte_end":155005,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155010,"byte_end":155101,"line_start":246,"line_end":246,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155106,"byte_end":155149,"line_start":247,"line_end":247,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast::<f16>();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155154,"byte_end":155214,"line_start":248,"line_end":248,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155219,"byte_end":155226,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155231,"byte_end":155242,"line_start":250,"line_end":250,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156766,"byte_end":156786,"line_start":286,"line_end":286,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast_mut","value":"fn reinterpret_cast_mut<H>(&mut Self) -> &mut [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Reinterprets a mutable slice of [`u16`] bits as a mutable slice of [`f16`] or [`bf16`]\n numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a mutable slice of [`u16`] bits as a mutable slice of [`f16`] or [`bf16`]","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155339,"byte_end":155429,"line_start":255,"line_end":255,"column_start":5,"column_end":95}},{"value":"/ numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155434,"byte_end":155446,"line_start":256,"line_end":256,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155451,"byte_end":155454,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155459,"byte_end":155539,"line_start":258,"line_end":258,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155544,"byte_end":155547,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155552,"byte_end":155646,"line_start":260,"line_end":260,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [f16]` is borrowed.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155651,"byte_end":155735,"line_start":261,"line_end":261,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155740,"byte_end":155743,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155748,"byte_end":155762,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155767,"byte_end":155770,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155775,"byte_end":155786,"line_start":265,"line_end":265,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155791,"byte_end":155818,"line_start":266,"line_end":266,"column_start":5,"column_end":32}},{"value":"/ let mut int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155823,"byte_end":155936,"line_start":267,"line_end":267,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155941,"byte_end":155944,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155949,"byte_end":155954,"line_start":269,"line_end":269,"column_start":5,"column_end":10}},{"value":"/     let float_buffer: &mut [f16] = int_buffer.reinterpret_cast_mut();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":155959,"byte_end":156032,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156037,"byte_end":156040,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156045,"byte_end":156137,"line_start":272,"line_end":272,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156142,"byte_end":156145,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/     // Mutating the f16 slice will mutating the original","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156150,"byte_end":156210,"line_start":274,"line_end":274,"column_start":5,"column_end":65}},{"value":"/     float_buffer[0] = f16::from_f32(0.);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156215,"byte_end":156259,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156264,"byte_end":156269,"line_start":276,"line_end":276,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156274,"byte_end":156277,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop float_buffer before using int_buffer again or we will get a borrow error.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156282,"byte_end":156388,"line_start":278,"line_end":278,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(int_buffer, [f16::from_f32(0.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156393,"byte_end":156509,"line_start":279,"line_end":279,"column_start":5,"column_end":121}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156514,"byte_end":156517,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156522,"byte_end":156613,"line_start":281,"line_end":281,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156618,"byte_end":156661,"line_start":282,"line_end":282,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156666,"byte_end":156730,"line_start":283,"line_end":283,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156735,"byte_end":156742,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156747,"byte_end":156758,"line_start":285,"line_end":285,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":676},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":156922,"byte_end":156942,"line_start":294,"line_end":294,"column_start":15,"column_end":35},"name":"SealedHalfFloatSlice","qualname":"::slice::private::SealedHalfFloatSlice","value":"SealedHalfFloatSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":679},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":157048,"byte_end":157067,"line_start":298,"line_end":298,"column_start":15,"column_end":34},"name":"SealedHalfBitsSlice","qualname":"::slice::private::SealedHalfBitsSlice","value":"SealedHalfBitsSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":157172,"byte_end":157188,"line_start":304,"line_end":304,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"<[f16] as slice::HalfFloatSliceExt>::reinterpret_cast","value":"fn reinterpret_cast(&Self) -> &[u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":655},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":157155,"byte_end":157164,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":157525,"byte_end":157545,"line_start":313,"line_end":313,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"<[f16] as slice::HalfFloatSliceExt>::reinterpret_cast_mut","value":"fn reinterpret_cast_mut(&mut Self) -> &mut [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":656},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":157508,"byte_end":157517,"line_start":312,"line_end":312,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":157884,"byte_end":157906,"line_start":321,"line_end":321,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_from_f32_slice","value":"fn convert_from_f32_slice(&mut Self, &[f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":657},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":158942,"byte_end":158964,"line_start":348,"line_end":348,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_from_f64_slice","value":"fn convert_from_f64_slice(&mut Self, &[f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":658},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":160000,"byte_end":160020,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_to_f32_slice","value":"fn convert_to_f32_slice(&Self, &mut [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":659},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":161057,"byte_end":161077,"line_start":402,"line_end":402,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_to_f64_slice","value":"fn convert_to_f64_slice(&Self, &mut [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":660},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162213,"byte_end":162223,"line_start":432,"line_end":432,"column_start":8,"column_end":18},"name":"to_f32_vec","qualname":"<[f16] as slice::HalfFloatSliceExt>::to_f32_vec","value":"fn to_f32_vec(&Self) -> Vec<f32>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":661},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162111,"byte_end":162158,"line_start":429,"line_end":429,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162163,"byte_end":162172,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162177,"byte_end":162205,"line_start":431,"line_end":431,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162738,"byte_end":162748,"line_start":445,"line_end":445,"column_start":8,"column_end":18},"name":"to_f64_vec","qualname":"<[f16] as slice::HalfFloatSliceExt>::to_f64_vec","value":"fn to_f64_vec(&Self) -> Vec<f64>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":662},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162636,"byte_end":162683,"line_start":442,"line_end":442,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162688,"byte_end":162697,"line_start":443,"line_end":443,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":162702,"byte_end":162730,"line_start":444,"line_end":444,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":163216,"byte_end":163232,"line_start":458,"line_end":458,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"<[bf16] as slice::HalfFloatSliceExt>::reinterpret_cast","value":"fn reinterpret_cast(&Self) -> &[u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":655},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":163199,"byte_end":163208,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":163569,"byte_end":163589,"line_start":467,"line_end":467,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"<[bf16] as slice::HalfFloatSliceExt>::reinterpret_cast_mut","value":"fn reinterpret_cast_mut(&mut Self) -> &mut [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":656},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":163552,"byte_end":163561,"line_start":466,"line_end":466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":163928,"byte_end":163950,"line_start":475,"line_end":475,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_from_f32_slice","value":"fn convert_from_f32_slice(&mut Self, &[f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":657},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":164311,"byte_end":164333,"line_start":488,"line_end":488,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_from_f64_slice","value":"fn convert_from_f64_slice(&mut Self, &[f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":658},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":164694,"byte_end":164714,"line_start":501,"line_end":501,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_to_f32_slice","value":"fn convert_to_f32_slice(&Self, &mut [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":659},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":165067,"byte_end":165087,"line_start":514,"line_end":514,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_to_f64_slice","value":"fn convert_to_f64_slice(&Self, &mut [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":660},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":165539,"byte_end":165549,"line_start":530,"line_end":530,"column_start":8,"column_end":18},"name":"to_f32_vec","qualname":"<[bf16] as slice::HalfFloatSliceExt>::to_f32_vec","value":"fn to_f32_vec(&Self) -> Vec<f32>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":661},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":165437,"byte_end":165484,"line_start":527,"line_end":527,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":165489,"byte_end":165498,"line_start":528,"line_end":528,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":165503,"byte_end":165531,"line_start":529,"line_end":529,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":166064,"byte_end":166074,"line_start":543,"line_end":543,"column_start":8,"column_end":18},"name":"to_f64_vec","qualname":"<[bf16] as slice::HalfFloatSliceExt>::to_f64_vec","value":"fn to_f64_vec(&Self) -> Vec<f64>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":662},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":165962,"byte_end":166009,"line_start":540,"line_end":540,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":166014,"byte_end":166023,"line_start":541,"line_end":541,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":166028,"byte_end":166056,"line_start":542,"line_end":542,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":166604,"byte_end":166620,"line_start":557,"line_end":557,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"<[u16] as slice::HalfBitsSliceExt>::reinterpret_cast","value":"fn reinterpret_cast<H>(&Self) -> &[H] where H: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":{"krate":0,"index":664},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":166587,"byte_end":166596,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":167009,"byte_end":167029,"line_start":569,"line_end":569,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"<[u16] as slice::HalfBitsSliceExt>::reinterpret_cast_mut","value":"fn reinterpret_cast_mut<H>(&mut Self) -> &mut [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":{"krate":0,"index":666},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":166992,"byte_end":167001,"line_start":568,"line_end":568,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":708},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":748},{"krate":0,"index":752},{"krate":0,"index":756}],"decl_id":null,"docs":" Contains utility functions and traits to convert between vectors of [`u16`] bits and [`f16`] or\n [`bf16`] vectors.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7694,"byte_end":7719,"line_start":181,"line_end":181,"column_start":1,"column_end":26}},{"value":"/ Contains utility functions and traits to convert between vectors of [`u16`] bits and [`f16`] or","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":176900,"byte_end":176999,"line_start":1,"line_end":1,"column_start":1,"column_end":100}},{"value":"/ [`bf16`] vectors.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177000,"byte_end":177021,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177022,"byte_end":177025,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The utility [`HalfBitsVecExt`] sealed extension trait is implemented for [`Vec<u16>`] vectors,","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177026,"byte_end":177124,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ while the utility [`HalfFloatVecExt`] sealed extension trait is implemented for both","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177125,"byte_end":177213,"line_start":5,"line_end":5,"column_start":1,"column_end":89}},{"value":"/ [`Vec<f16>`] and [`Vec<bf16>`] vectors. These traits provide efficient conversions and","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177214,"byte_end":177304,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ reinterpret casting of larger buffers of floating point values, and are automatically included","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177305,"byte_end":177403,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ in the [`prelude`][crate::prelude] module.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177404,"byte_end":177450,"line_start":8,"line_end":8,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177451,"byte_end":177454,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This module is only available with the `std` or `alloc` feature.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177455,"byte_end":177523,"line_start":10,"line_end":10,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":725},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177810,"byte_end":177825,"line_start":20,"line_end":20,"column_start":11,"column_end":26},"name":"HalfFloatVecExt","qualname":"::vec::HalfFloatVecExt","value":"HalfFloatVecExt: private::SealedHalfFloatVec","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728}],"decl_id":null,"docs":" Extensions to [`Vec<f16>`] and [`Vec<bf16>`] to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to [`Vec<f16>`] and [`Vec<bf16>`] to support reinterpret operations.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177638,"byte_end":177721,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177722,"byte_end":177725,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177726,"byte_end":177799,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178461,"byte_end":178477,"line_start":36,"line_end":36,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"::vec::HalfFloatVecExt::reinterpret_into","value":"fn reinterpret_into(Self) -> Vec<u16>","parent":{"krate":0,"index":725},"children":[],"decl_id":null,"docs":" Reinterprets a vector of [`f16`]or [`bf16`] numbers as a vector of [`u16`] bits.","sig":null,"attributes":[{"value":"/ Reinterprets a vector of [`f16`]or [`bf16`] numbers as a vector of [`u16`] bits.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177861,"byte_end":177945,"line_start":21,"line_end":21,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177950,"byte_end":177953,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted vector has the same memory location as","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177958,"byte_end":178049,"line_start":23,"line_end":23,"column_start":5,"column_end":96}},{"value":"/ `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178054,"byte_end":178065,"line_start":24,"line_end":24,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178070,"byte_end":178073,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178078,"byte_end":178092,"line_start":26,"line_end":26,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178097,"byte_end":178100,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178105,"byte_end":178116,"line_start":28,"line_end":28,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178121,"byte_end":178148,"line_start":29,"line_end":29,"column_start":5,"column_end":32}},{"value":"/ let float_buffer = vec![f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178153,"byte_end":178238,"line_start":30,"line_end":30,"column_start":5,"column_end":90}},{"value":"/ let int_buffer = float_buffer.reinterpret_into();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178243,"byte_end":178296,"line_start":31,"line_end":31,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178301,"byte_end":178304,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(int_buffer, [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178309,"byte_end":178425,"line_start":33,"line_end":33,"column_start":5,"column_end":121}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178430,"byte_end":178437,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178442,"byte_end":178453,"line_start":35,"line_end":35,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179238,"byte_end":179252,"line_start":54,"line_end":54,"column_start":8,"column_end":22},"name":"from_f32_slice","qualname":"::vec::HalfFloatVecExt::from_f32_slice","value":"fn from_f32_slice(&[f32]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f32]` slice into a new [`f16`] or [`bf16`] vector.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f32]` slice into a new [`f16`] or [`bf16`] vector.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178502,"byte_end":178592,"line_start":38,"line_end":38,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178597,"byte_end":178600,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178605,"byte_end":178698,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178703,"byte_end":178788,"line_start":41,"line_end":41,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation][crate] for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178793,"byte_end":178886,"line_start":42,"line_end":42,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178891,"byte_end":178903,"line_start":43,"line_end":43,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178908,"byte_end":178911,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178916,"byte_end":178930,"line_start":45,"line_end":45,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178935,"byte_end":178946,"line_start":46,"line_end":46,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178951,"byte_end":178978,"line_start":47,"line_end":47,"column_start":5,"column_end":32}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":178983,"byte_end":179023,"line_start":48,"line_end":48,"column_start":5,"column_end":45}},{"value":"/ let vec: Vec<f16> = Vec::from_f32_slice(&float_values);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179028,"byte_end":179087,"line_start":49,"line_end":49,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179092,"byte_end":179095,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179100,"byte_end":179202,"line_start":51,"line_end":51,"column_start":5,"column_end":107}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179207,"byte_end":179214,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179219,"byte_end":179230,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180018,"byte_end":180032,"line_start":72,"line_end":72,"column_start":8,"column_end":22},"name":"from_f64_slice","qualname":"::vec::HalfFloatVecExt::from_f64_slice","value":"fn from_f64_slice(&[f64]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f64]` slice into a new [`f16`] or [`bf16`] vector.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f64]` slice into a new [`f16`] or [`bf16`] vector.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179282,"byte_end":179372,"line_start":56,"line_end":56,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179377,"byte_end":179380,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179385,"byte_end":179478,"line_start":58,"line_end":58,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179483,"byte_end":179568,"line_start":59,"line_end":59,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation][crate] for more information on hardware conversion","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179573,"byte_end":179666,"line_start":60,"line_end":60,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179671,"byte_end":179683,"line_start":61,"line_end":61,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179688,"byte_end":179691,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179696,"byte_end":179710,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179715,"byte_end":179726,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179731,"byte_end":179758,"line_start":65,"line_end":65,"column_start":5,"column_end":32}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179763,"byte_end":179803,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let vec: Vec<f16> = Vec::from_f64_slice(&float_values);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179808,"byte_end":179867,"line_start":67,"line_end":67,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179872,"byte_end":179875,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179880,"byte_end":179982,"line_start":69,"line_end":69,"column_start":5,"column_end":107}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179987,"byte_end":179994,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":179999,"byte_end":180010,"line_start":71,"line_end":71,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":729},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180214,"byte_end":180228,"line_start":78,"line_end":78,"column_start":11,"column_end":25},"name":"HalfBitsVecExt","qualname":"::vec::HalfBitsVecExt","value":"HalfBitsVecExt: private::SealedHalfBitsVec","parent":null,"children":[{"krate":0,"index":730}],"decl_id":null,"docs":" Extensions to [`Vec<u16>`] to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to [`Vec<u16>`] to support reinterpret operations.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180060,"byte_end":180125,"line_start":75,"line_end":75,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180126,"byte_end":180129,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180130,"byte_end":180203,"line_start":77,"line_end":77,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180964,"byte_end":180980,"line_start":96,"line_end":96,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"::vec::HalfBitsVecExt::reinterpret_into","value":"fn reinterpret_into<H>(Self) -> Vec<H> where H: crate::private::SealedHalf","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Reinterprets a vector of [`u16`] bits as a vector of [`f16`] or [`bf16`] numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a vector of [`u16`] bits as a vector of [`f16`] or [`bf16`] numbers.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180263,"byte_end":180348,"line_start":79,"line_end":79,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180353,"byte_end":180356,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180361,"byte_end":180441,"line_start":81,"line_end":81,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180446,"byte_end":180449,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted vector has the same memory location as","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180454,"byte_end":180545,"line_start":83,"line_end":83,"column_start":5,"column_end":96}},{"value":"/ `self`.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180550,"byte_end":180561,"line_start":84,"line_end":84,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180566,"byte_end":180569,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180574,"byte_end":180588,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180593,"byte_end":180596,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180601,"byte_end":180612,"line_start":88,"line_end":88,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180617,"byte_end":180644,"line_start":89,"line_end":89,"column_start":5,"column_end":32}},{"value":"/ let int_buffer = vec![f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180649,"byte_end":180762,"line_start":90,"line_end":90,"column_start":5,"column_end":118}},{"value":"/ let float_buffer = int_buffer.reinterpret_into::<f16>();","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180767,"byte_end":180827,"line_start":91,"line_end":91,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180832,"byte_end":180835,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180840,"byte_end":180928,"line_start":93,"line_end":93,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180933,"byte_end":180940,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180945,"byte_end":180956,"line_start":95,"line_end":95,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":743},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181164,"byte_end":181182,"line_start":106,"line_end":106,"column_start":15,"column_end":33},"name":"SealedHalfFloatVec","qualname":"::vec::private::SealedHalfFloatVec","value":"SealedHalfFloatVec","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":746},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181290,"byte_end":181307,"line_start":110,"line_end":110,"column_start":15,"column_end":32},"name":"SealedHalfBitsVec","qualname":"::vec::private::SealedHalfBitsVec","value":"SealedHalfBitsVec","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181414,"byte_end":181430,"line_start":116,"line_end":116,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"<Vec<f16> as vec::HalfFloatVecExt>::reinterpret_into","value":"fn reinterpret_into(Self) -> Vec<u16>","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":726},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181397,"byte_end":181406,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":182310,"byte_end":182324,"line_start":136,"line_end":136,"column_start":8,"column_end":22},"name":"from_f32_slice","qualname":"<Vec<f16> as vec::HalfFloatVecExt>::from_f32_slice","value":"fn from_f32_slice(&[f32]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":727},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":182274,"byte_end":182302,"line_start":135,"line_end":135,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":182777,"byte_end":182791,"line_start":147,"line_end":147,"column_start":8,"column_end":22},"name":"from_f64_slice","qualname":"<Vec<f16> as vec::HalfFloatVecExt>::from_f64_slice","value":"fn from_f64_slice(&[f64]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":728},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":182741,"byte_end":182769,"line_start":146,"line_end":146,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":183264,"byte_end":183280,"line_start":160,"line_end":160,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"<Vec<bf16> as vec::HalfFloatVecExt>::reinterpret_into","value":"fn reinterpret_into(Self) -> Vec<u16>","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":726},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":183247,"byte_end":183256,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":184160,"byte_end":184174,"line_start":180,"line_end":180,"column_start":8,"column_end":22},"name":"from_f32_slice","qualname":"<Vec<bf16> as vec::HalfFloatVecExt>::from_f32_slice","value":"fn from_f32_slice(&[f32]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":727},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":184124,"byte_end":184152,"line_start":179,"line_end":179,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":184627,"byte_end":184641,"line_start":191,"line_end":191,"column_start":8,"column_end":22},"name":"from_f64_slice","qualname":"<Vec<bf16> as vec::HalfFloatVecExt>::from_f64_slice","value":"fn from_f64_slice(&[f64]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":728},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":184591,"byte_end":184619,"line_start":190,"line_end":190,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":185162,"byte_end":185178,"line_start":205,"line_end":205,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"<Vec<u16> as vec::HalfBitsVecExt>::reinterpret_into","value":"fn reinterpret_into<H>(Self) -> Vec<H> where H: crate::private::SealedHalf","parent":{"krate":0,"index":729},"children":[],"decl_id":{"krate":0,"index":730},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":185145,"byte_end":185154,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":765},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7991,"byte_end":7998,"line_start":195,"line_end":195,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":784}],"decl_id":null,"docs":" A collection of the most used items and traits in this crate for easy importing.","sig":null,"attributes":[{"value":"/ A collection of the most used items and traits in this crate for easy importing.","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7829,"byte_end":7913,"line_start":188,"line_end":188,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7914,"byte_end":7917,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7918,"byte_end":7932,"line_start":190,"line_end":190,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7933,"byte_end":7936,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7937,"byte_end":7948,"line_start":192,"line_end":192,"column_start":1,"column_end":12}},{"value":"/ use half::prelude::*;","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7949,"byte_end":7974,"line_start":193,"line_end":193,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7975,"byte_end":7982,"line_start":194,"line_end":194,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":795},"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8444,"byte_end":8454,"line_start":213,"line_end":213,"column_start":15,"column_end":25},"name":"SealedHalf","qualname":"::private::SealedHalf","value":"SealedHalf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10191,"byte_end":10195,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32716,"byte_end":32720,"line_start":743,"line_end":743,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32870,"byte_end":32874,"line_start":751,"line_end":751,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":33024,"byte_end":33028,"line_start":759,"line_end":759,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":33264,"byte_end":33268,"line_start":769,"line_end":769,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36282,"byte_end":36286,"line_start":859,"line_end":859,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36489,"byte_end":36493,"line_start":867,"line_end":867,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36662,"byte_end":36666,"line_start":874,"line_end":874,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36834,"byte_end":36838,"line_start":881,"line_end":881,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37008,"byte_end":37012,"line_start":888,"line_end":888,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37180,"byte_end":37184,"line_start":895,"line_end":895,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37344,"byte_end":37348,"line_start":902,"line_end":902,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37511,"byte_end":37515,"line_start":909,"line_end":909,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37678,"byte_end":37682,"line_start":916,"line_end":916,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37805,"byte_end":37809,"line_start":922,"line_end":922,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38069,"byte_end":38073,"line_start":939,"line_end":939,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38239,"byte_end":38243,"line_start":947,"line_end":947,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38747,"byte_end":38751,"line_start":974,"line_end":974,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38879,"byte_end":38883,"line_start":981,"line_end":981,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38999,"byte_end":39003,"line_start":988,"line_end":988,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39169,"byte_end":39173,"line_start":996,"line_end":996,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39677,"byte_end":39681,"line_start":1023,"line_end":1023,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39809,"byte_end":39813,"line_start":1030,"line_end":1030,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39929,"byte_end":39933,"line_start":1037,"line_end":1037,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40099,"byte_end":40103,"line_start":1045,"line_end":1045,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40607,"byte_end":40611,"line_start":1072,"line_end":1072,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40739,"byte_end":40743,"line_start":1079,"line_end":1079,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40859,"byte_end":40863,"line_start":1086,"line_end":1086,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41029,"byte_end":41033,"line_start":1094,"line_end":1094,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41537,"byte_end":41541,"line_start":1121,"line_end":1121,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41669,"byte_end":41673,"line_start":1128,"line_end":1128,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41789,"byte_end":41793,"line_start":1135,"line_end":1135,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41959,"byte_end":41963,"line_start":1143,"line_end":1143,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42467,"byte_end":42471,"line_start":1170,"line_end":1170,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42599,"byte_end":42603,"line_start":1177,"line_end":1177,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42723,"byte_end":42727,"line_start":1184,"line_end":1184,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42903,"byte_end":42907,"line_start":1191,"line_end":1191,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43069,"byte_end":43073,"line_start":1198,"line_end":1198,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43237,"byte_end":43241,"line_start":1205,"line_end":1205,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70628,"byte_end":70631,"line_start":42,"line_end":42,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93617,"byte_end":93620,"line_start":752,"line_end":752,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93767,"byte_end":93770,"line_start":760,"line_end":760,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93918,"byte_end":93921,"line_start":768,"line_end":768,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":94156,"byte_end":94159,"line_start":778,"line_end":778,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97168,"byte_end":97171,"line_start":868,"line_end":868,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97372,"byte_end":97375,"line_start":876,"line_end":876,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97544,"byte_end":97547,"line_start":883,"line_end":883,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97715,"byte_end":97718,"line_start":890,"line_end":890,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97888,"byte_end":97891,"line_start":897,"line_end":897,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98059,"byte_end":98062,"line_start":904,"line_end":904,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98222,"byte_end":98225,"line_start":911,"line_end":911,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98388,"byte_end":98391,"line_start":918,"line_end":918,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98554,"byte_end":98557,"line_start":925,"line_end":925,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98680,"byte_end":98683,"line_start":931,"line_end":931,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98955,"byte_end":98958,"line_start":949,"line_end":949,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99137,"byte_end":99140,"line_start":958,"line_end":958,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99631,"byte_end":99634,"line_start":985,"line_end":985,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99761,"byte_end":99764,"line_start":992,"line_end":992,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99879,"byte_end":99882,"line_start":999,"line_end":999,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100061,"byte_end":100064,"line_start":1008,"line_end":1008,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100555,"byte_end":100558,"line_start":1035,"line_end":1035,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100685,"byte_end":100688,"line_start":1042,"line_end":1042,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100803,"byte_end":100806,"line_start":1049,"line_end":1049,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100985,"byte_end":100988,"line_start":1058,"line_end":1058,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101479,"byte_end":101482,"line_start":1085,"line_end":1085,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101609,"byte_end":101612,"line_start":1092,"line_end":1092,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101727,"byte_end":101730,"line_start":1099,"line_end":1099,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101909,"byte_end":101912,"line_start":1108,"line_end":1108,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102403,"byte_end":102406,"line_start":1135,"line_end":1135,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102533,"byte_end":102536,"line_start":1142,"line_end":1142,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102651,"byte_end":102654,"line_start":1149,"line_end":1149,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102833,"byte_end":102836,"line_start":1158,"line_end":1158,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103327,"byte_end":103330,"line_start":1185,"line_end":1185,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103457,"byte_end":103460,"line_start":1192,"line_end":1192,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103579,"byte_end":103582,"line_start":1199,"line_end":1199,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103756,"byte_end":103759,"line_start":1206,"line_end":1206,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103919,"byte_end":103922,"line_start":1213,"line_end":1213,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":104084,"byte_end":104087,"line_start":1220,"line_end":1220,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181218,"byte_end":181221,"line_start":107,"line_end":107,"column_start":33,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181262,"byte_end":181265,"line_start":108,"line_end":108,"column_start":33,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181342,"byte_end":181345,"line_start":111,"line_end":111,"column_start":32,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181382,"byte_end":181385,"line_start":114,"line_end":114,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":183231,"byte_end":183234,"line_start":158,"line_end":158,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":185080,"byte_end":185083,"line_start":202,"line_end":202,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8483,"byte_end":8486,"line_start":215,"line_end":215,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8514,"byte_end":8518,"line_start":216,"line_end":216,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7687,"byte_end":7692,"line_start":180,"line_end":180,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":637}},{"kind":"Mod","span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":7777,"byte_end":7780,"line_start":183,"line_end":183,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":708}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":10191,"byte_end":10195,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32716,"byte_end":32720,"line_start":743,"line_end":743,"column_start":19,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":32870,"byte_end":32874,"line_start":751,"line_end":751,"column_start":19,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":33024,"byte_end":33028,"line_start":759,"line_end":759,"column_start":20,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":33264,"byte_end":33268,"line_start":769,"line_end":769,"column_start":21,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":2877}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36282,"byte_end":36286,"line_start":859,"line_end":859,"column_start":18,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":12765}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36489,"byte_end":36493,"line_start":867,"line_end":867,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10108}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36662,"byte_end":36666,"line_start":874,"line_end":874,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10115}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":36834,"byte_end":36838,"line_start":881,"line_end":881,"column_start":19,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10127}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37008,"byte_end":37012,"line_start":888,"line_end":888,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10129}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37180,"byte_end":37184,"line_start":895,"line_end":895,"column_start":17,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10119}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37344,"byte_end":37348,"line_start":902,"line_end":902,"column_start":16,"column_end":20},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37511,"byte_end":37515,"line_start":909,"line_end":909,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10121}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37678,"byte_end":37682,"line_start":916,"line_end":916,"column_start":19,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10123}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":37805,"byte_end":37809,"line_start":922,"line_end":922,"column_start":14,"column_end":18},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3274}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38069,"byte_end":38073,"line_start":939,"line_end":939,"column_start":14,"column_end":18},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3247}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38239,"byte_end":38243,"line_start":947,"line_end":947,"column_start":21,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3247}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38747,"byte_end":38751,"line_start":974,"line_end":974,"column_start":20,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3278}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38879,"byte_end":38883,"line_start":981,"line_end":981,"column_start":27,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3278}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":38999,"byte_end":39003,"line_start":988,"line_end":988,"column_start":14,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3252}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39169,"byte_end":39173,"line_start":996,"line_end":996,"column_start":21,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3252}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39677,"byte_end":39681,"line_start":1023,"line_end":1023,"column_start":20,"column_end":24},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3282}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39809,"byte_end":39813,"line_start":1030,"line_end":1030,"column_start":27,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3282}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":39929,"byte_end":39933,"line_start":1037,"line_end":1037,"column_start":14,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3257}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40099,"byte_end":40103,"line_start":1045,"line_end":1045,"column_start":21,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3257}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40607,"byte_end":40611,"line_start":1072,"line_end":1072,"column_start":20,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3286}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40739,"byte_end":40743,"line_start":1079,"line_end":1079,"column_start":27,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3286}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":40859,"byte_end":40863,"line_start":1086,"line_end":1086,"column_start":14,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3262}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41029,"byte_end":41033,"line_start":1094,"line_end":1094,"column_start":21,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3262}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41537,"byte_end":41541,"line_start":1121,"line_end":1121,"column_start":20,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3290}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41669,"byte_end":41673,"line_start":1128,"line_end":1128,"column_start":27,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3290}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41789,"byte_end":41793,"line_start":1135,"line_end":1135,"column_start":14,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3268}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":41959,"byte_end":41963,"line_start":1143,"line_end":1143,"column_start":21,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3268}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42467,"byte_end":42471,"line_start":1170,"line_end":1170,"column_start":20,"column_end":24},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3294}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42599,"byte_end":42603,"line_start":1177,"line_end":1177,"column_start":27,"column_end":31},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3294}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42723,"byte_end":42727,"line_start":1184,"line_end":1184,"column_start":18,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8242}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":42903,"byte_end":42907,"line_start":1191,"line_end":1191,"column_start":32,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8242}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43069,"byte_end":43073,"line_start":1198,"line_end":1198,"column_start":14,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8238}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/bfloat.rs","byte_start":43237,"byte_end":43241,"line_start":1205,"line_end":1205,"column_start":28,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8238}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":70628,"byte_end":70631,"line_start":42,"line_end":42,"column_start":6,"column_end":9},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93617,"byte_end":93620,"line_start":752,"line_end":752,"column_start":19,"column_end":22},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93767,"byte_end":93770,"line_start":760,"line_end":760,"column_start":19,"column_end":22},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":93918,"byte_end":93921,"line_start":768,"line_end":768,"column_start":20,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":94156,"byte_end":94159,"line_start":778,"line_end":778,"column_start":21,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":2877}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97168,"byte_end":97171,"line_start":868,"line_end":868,"column_start":18,"column_end":21},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":12765}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97372,"byte_end":97375,"line_start":876,"line_end":876,"column_start":16,"column_end":19},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10108}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97544,"byte_end":97547,"line_start":883,"line_end":883,"column_start":18,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10115}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97715,"byte_end":97718,"line_start":890,"line_end":890,"column_start":19,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10127}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":97888,"byte_end":97891,"line_start":897,"line_end":897,"column_start":19,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10129}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98059,"byte_end":98062,"line_start":904,"line_end":904,"column_start":17,"column_end":20},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10119}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98222,"byte_end":98225,"line_start":911,"line_end":911,"column_start":16,"column_end":19},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98388,"byte_end":98391,"line_start":918,"line_end":918,"column_start":19,"column_end":22},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10121}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98554,"byte_end":98557,"line_start":925,"line_end":925,"column_start":19,"column_end":22},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10123}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98680,"byte_end":98683,"line_start":931,"line_end":931,"column_start":14,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3274}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":98955,"byte_end":98958,"line_start":949,"line_end":949,"column_start":14,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3247}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99137,"byte_end":99140,"line_start":958,"line_end":958,"column_start":20,"column_end":23},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3247}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99631,"byte_end":99634,"line_start":985,"line_end":985,"column_start":20,"column_end":23},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3278}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99761,"byte_end":99764,"line_start":992,"line_end":992,"column_start":26,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3278}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":99879,"byte_end":99882,"line_start":999,"line_end":999,"column_start":14,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3252}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100061,"byte_end":100064,"line_start":1008,"line_end":1008,"column_start":20,"column_end":23},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3252}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100555,"byte_end":100558,"line_start":1035,"line_end":1035,"column_start":20,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3282}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100685,"byte_end":100688,"line_start":1042,"line_end":1042,"column_start":26,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3282}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100803,"byte_end":100806,"line_start":1049,"line_end":1049,"column_start":14,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3257}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":100985,"byte_end":100988,"line_start":1058,"line_end":1058,"column_start":20,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3257}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101479,"byte_end":101482,"line_start":1085,"line_end":1085,"column_start":20,"column_end":23},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3286}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101609,"byte_end":101612,"line_start":1092,"line_end":1092,"column_start":26,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3286}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101727,"byte_end":101730,"line_start":1099,"line_end":1099,"column_start":14,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3262}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":101909,"byte_end":101912,"line_start":1108,"line_end":1108,"column_start":20,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3262}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102403,"byte_end":102406,"line_start":1135,"line_end":1135,"column_start":20,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3290}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102533,"byte_end":102536,"line_start":1142,"line_end":1142,"column_start":26,"column_end":29},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3290}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102651,"byte_end":102654,"line_start":1149,"line_end":1149,"column_start":14,"column_end":17},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3268}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":102833,"byte_end":102836,"line_start":1158,"line_end":1158,"column_start":20,"column_end":23},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3268}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103327,"byte_end":103330,"line_start":1185,"line_end":1185,"column_start":20,"column_end":23},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3294}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103457,"byte_end":103460,"line_start":1192,"line_end":1192,"column_start":26,"column_end":29},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3294}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103579,"byte_end":103582,"line_start":1199,"line_end":1199,"column_start":18,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8242}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103756,"byte_end":103759,"line_start":1206,"line_end":1206,"column_start":31,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8242}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":103919,"byte_end":103922,"line_start":1213,"line_end":1213,"column_start":14,"column_end":17},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8238}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/binary16.rs","byte_start":104084,"byte_end":104087,"line_start":1220,"line_end":1220,"column_start":27,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8238}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":146051,"byte_end":146071,"line_start":18,"line_end":18,"column_start":39,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":676},"to":{"krate":0,"index":654}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/slice.rs","byte_start":154299,"byte_end":154318,"line_start":229,"line_end":229,"column_start":38,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":679},"to":{"krate":0,"index":663}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":177836,"byte_end":177854,"line_start":20,"line_end":20,"column_start":37,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":743},"to":{"krate":0,"index":725}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":180239,"byte_end":180256,"line_start":78,"line_end":78,"column_start":36,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":746},"to":{"krate":0,"index":729}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181218,"byte_end":181221,"line_start":107,"line_end":107,"column_start":33,"column_end":36},"kind":{"Impl":{"id":82}},"from":{"krate":5,"index":7753},"to":{"krate":0,"index":743}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181262,"byte_end":181265,"line_start":108,"line_end":108,"column_start":33,"column_end":36},"kind":{"Impl":{"id":83}},"from":{"krate":5,"index":7753},"to":{"krate":0,"index":743}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181342,"byte_end":181345,"line_start":111,"line_end":111,"column_start":32,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":5,"index":7753},"to":{"krate":0,"index":746}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":181382,"byte_end":181385,"line_start":114,"line_end":114,"column_start":26,"column_end":29},"kind":{"Impl":{"id":85}},"from":{"krate":5,"index":7753},"to":{"krate":0,"index":725}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":183231,"byte_end":183234,"line_start":158,"line_end":158,"column_start":26,"column_end":29},"kind":{"Impl":{"id":86}},"from":{"krate":5,"index":7753},"to":{"krate":0,"index":725}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/vec.rs","byte_start":185080,"byte_end":185083,"line_start":202,"line_end":202,"column_start":25,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":5,"index":7753},"to":{"krate":0,"index":729}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8483,"byte_end":8486,"line_start":215,"line_end":215,"column_start":25,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":818},"to":{"krate":0,"index":795}},{"span":{"file_name":"/home/kobruh/.cargo/registry/src/github.com-1ecc6299db9ec823/half-2.1.0/src/lib.rs","byte_start":8514,"byte_end":8518,"line_start":216,"line_end":216,"column_start":25,"column_end":29},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":798},"to":{"krate":0,"index":795}}]}